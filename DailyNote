9月：Ubuntu Server的搭建和配置，MySql的安装和配置，JDBC的使用，建立一个简单的表。
    Socket编程深入学习，循环服务器和三种并发服务器的设计和代码实践。

10月：Tomcat深入学习
11月：Tomcat深入学习，了解了部分JSP和Servlet、Struts知识；
     实现了Android上用HTTP post附件到Tomcat 服务器的功能；





12.08~09 : 学习JDK（参见jdk笔记与java笔记）
	一、jdk中各种容器的学习：主要就是掌握 三个List，两个Map，一个Queue 这六个数据结构类
		





12.12~13 :一些Java语言的学习，比如程序在内存中的分布等等，比如c++中多态如何实现等等







2012 
2.03: 解决加入struct2框架后网页不能访问的问题：主要原因是Tomcat在启动时需要init所有的Filter，其中就包括structs的核心控制器；在初始化核心控制器时，Tomcat会根据struts-default.xml这个文件查找所有的bean，这些bean一般都在jar中找。  *** 而因为是Tomcat本身就需要这些jar，所以需要在Tomcat的lib文件夹中添加这些jar，又因为jar不能重复添加，所以app本身的lib文件夹不能再次包含这些jar **** 参见今天的git commit。




2.04: 	filter的map以filter的名字为媒介，把filter类和访问地址联系起来；
	  
		action以namespace为媒介，把jsp中的action和struts.xml中的action联系起来；即jsp中的action表示由哪里的namespace中的action来处理，struts.xml中定义各个namespace中的各个action；
		如果jsp中的action没有定义namespace，则namespace默认为此jsp相同的namespace；如果访问“/”，则使用一个默认的action：default-action-ref
		绝对路径以“/”开头，相对路径不以“/”开头

		
		*** 根据DefaultActionMapper类的dropExtension()函数：它表示Struts只处理两种uri：一种是以""结尾，一种是"action"结尾；其它的通通返回null表Struts不处理（即在核心控制器StrutsPrepareAndExecuteFilter的doFilter()函数中执行execute.executeStaticResourceRequest(request, response);）；
		所以如果仅仅是一个jsp的访问，struts2会执行execute.executeStaticResourceRequest（），并接下来调用chain.doFilter(request, response);   
		而如果是一个Post，则会发送到一个.action结尾的uri，然后执行execute.executeAction(request, response, mapping);


2.05:	
		chain   用来处理Action链，转向另一个action；
		dispatcher  用来转向页面，通常处理JSP 
		redirect  重定向到一个jsp
		redirectAction（或redirect-action）   重定向到一个Action 

2.06：
		对于get方式，服务器端用Request.getQueryString获取变量的值，QueryString就是get请求中跟在URI后的请求字符串；对于post方式，服务器端用Request.Form获取提交的数据。
也就是说，get请求只有起始行，只有post才有消息头和消息体，表单提交一般都是用post
如：<s:form action="/dealupdate.action" method="post" name="updateMsgForm">就是将form用post方式发送给dealupdate.action


2.11:
		1. 在eclipse中，每个project都有四个lib：jre（即jdk），ear，Webserver，webapp。这四个lib分别管理着各自的那些jar。今天的eclipse的调试服务器tomcat无法启动就是因为webserver中的某些jar和webapp中的某些jar冲突所致。
		2.eclipse中的tomcat没有启动还有一个原因就是myapps/MobileServer/.settings/org.eclipse.wst.common.project.facet.core.xml中多了一行jdk_1.6.27，具体原因未知；
		
		3.如果在eclipse中tomcat出问题，可重新从干净的版本开始重新加webapp以消除问题


2.14:
		git 意外中断或被ctrl+c停止时，会出现无法push的错误，此时可使用git update-server-info命令解决


2.15：
		Java的内核是unicode的，它的char也是用unicode表示；String的核心就是char[]；

		Java中最基本的变量类型是Byte，它转成char时要根据当前系统的编码方式，使用ByteToCharConverter类来获取当前的编码方式，如unicode，gb2312，8859-1之类的

		Reader,Writer的核心是char；InputStream,OutputStream的核心是Byte


2.18.	（详情参见blog）
		五种字符编码方式：	1. iso8859-1 	英文字符，一个字节
					  	2. gb2312		中文字符，不定字节
						3. GBK			兼容iso8859-1 & gb2312，不定字节
						4. unicode		所有字符，定长两字节，有利于计算机计算，不利于传输和存储；java默认编码方式  ------ 但如果都是中文，只有少量英文时，还是unicode存储好
						5. utf8			所有字符，1～6字节，汉字通常3字节。不利于计算机计算，有利于传输和存储；----- 可以识别混合的汉字和英文，参见blog

		java三种字符处理：（字符串是一个独立的对象，它应该是 根据编码方式的不同 而对应不同的字节数组；默认是unicode）
						1. getBytes(charset)；用charset指定的编码方式，将字符串转成相应的byte[];
						2. new String(charset)；与以上相反。用charset将byte[]转成相应的字符串，再转换成java默认的unicode
						3. http请求处理中的setCharacterEncoding()；

		GZIPOutputStream gos = new GZIPOutputStream(OutputStream os); 	-------   gos完成以后调用gos.finish();就可以再用一个新的gos往os里面写压缩数据。最后调用os.close()就可以完成flush和关闭动作。

		catch异常的目的就是把错误管理起来，不要让系统来处理，不会产生crash之类的现象。而catch之后的做法一般就是防止当前异常的一部分内容影响到别的工作。让别的工作还是正常运行。

2.21	
		在Tomcat中，servlet是一个singleton，所以它的成员变量和静态变量在多个连接（即线程）中是共享的，是线程不安全的，但如果用各种互斥机制又会影响server的性能，所以使用ThreadLocal模式来解决：
		ThreadLocal类在维护变量时，实际使用了当前线程（Thread）中的一个叫做ThreadLocalMap的独立副本，每个线程可以独立修改属于自己的副本而不会互相影响，从而避免了线程访问实例变量发生冲突的问题。即每个servlet的成员变量和静态变量在每个Thread中都有各自的副本

		public class Thread implements Runnable {  
		   // 这里省略了许多其他的代码  
		   ThreadLocal.ThreadLocalMap threadLocals = null;  
		}  


2.22
		在一个Webapp中，有五个常用对象：HttpServletRequest，HttpServletResponse，具体的Context，HttpSession，Cookie。它们由Tomcat创建，然后依次传入Filter（Struts2）-> Action，Servlet。因此在这些对象中都能够得到上诉的那五个对象。其中Context等是Tomcat中的对象，为了防止webapp直接访问到Tomcat，应该都是用一个ContextWrapper来传入。



2.24
		Java调试服务原理：
			JPDA(Java Platform Debugger Architecture,Java平台调试架构) ,由Java虚拟机后端和调试平台前端组成, JPDA为Java平台上的调试器定义了一个标准的体系结构。该体系结构包括3个主要组成部分：JVM TI（JavaVirtualMachineToolInterface）、JDI（Java Debug Interface）和JDWP（Java Debug Wire Protocol）。
			1）JVM TI就相当于DDS：它包含两部分内容，
					a）是JVM为了支持调试而必须提供的功能及相应的访问接口。包括调试信息（Information譬如栈信息）、调试行为（Action譬如客户端设置一个断点）和通知（Notification譬如到达某个断点时通知客户端）。相当于DDS的plugin
					b）JPDA back-end：对外提供调试服务的server端。相当于包含很多plugin而对外提供服务的DDS。

			2）JDI：JDI实现的角色就是JPDA front-end，调试器实现者可直接使用该接口访问虚拟机调试服务。

			3）JDWP：它定义了JPDA front-end和JPDA back-end之间通讯信息的二进制格式。包括调试器发送给JVM的请求信息和JVM发送给调试器的调试信息。

		当虚拟机的调试服务运行时，虚拟机作为调试的服务提供端，监听一个连接，而调试器通过该连接与虚拟机进行交互。JVM提供了两种方式的连接：共享内存和 Socket连接，共享内存的服务提供端和调试端只能位于同一台机，而Socket连接则支持不同异机调试，即远程调试。
		


2.27
	一）
		为什么匿名内部类中引用的局部变量和参数需要final而成员变量不用：
			1）java编译器决定了，在构造一个匿名内部类时，所有的final局部变量和参数变量都会被传入inner class的构造函数，赋值给inner class的成员变量（也是final）。这样inner class才能引用这些局部变量和参数变量；
			2）在外部函数中声明一个变量为final，就相当于提示“这个变量会拷贝到内部类中使用，所以在这里你不能改动“。因为如果改动了，局部变量变量和inner class的成员变量 的值就会不一致，会给程序员带来困惑。所以java编译器干脆强制传入的变量必须为final类型，否则编译不通过。
			3）匿名内部类可以直接引用外部类的成员变量，是因为编译器会默认将外部类的this指针以final的形式传递给内部类。这样，内部类就可以用this.xx 来引用外部类的成员变量。

			###### 在java中，final变量就相当于c++中的常量指针，所以用final修饰的变量的non-final域，在内部类中还是可以修改的 ######

	二）
		在android中，一个Adapter主要就是实现其getView()，而这个函数的作用就是设定 dataset中的每个元素跟view中的每个item 结合的方式：

		AdapterView			ListAdapter		SpinnerAdapter
			|									|_________________|
			|											 |
		AbsListView					BaseAdapter		  Filterable（不管数据是什么对象，都用toString()来表示以及过滤）
			|											 |_________________|
			|											 |		  |
		ListView								 |	 ArrayAdapter（数据集为List，所以Vector，ArrayList都用它）
														 |
												 各种自定义的Adapter



		在View - Adapter - Dataset的MVC结构中，Adapter和View之间还有一个 Observer模式：
			1） BaseAdapter中有一个DataSetObservable为模式中的Subject角色，而里面的一个ArrayList类型的mObservers为模式中的Observer角色。
			2） ListView中有一个AdapterDataSetObserver为模式中的Observer角色，它通过BaseAdapter调用DataSetObservable提供的注册函数。
			3） 当Dataset变化时，DataSetObservable通过调用所有AdapterDataSetObserver的onChange()函数来实现Notify();
				以上为android的内部实现，而用户要实现Observer的注册，注册函数会在ListView.setAdapter()时被调用



2.28
		ArrayAdapter如果是用T[]这个构造函数构造的话，就不能用add()、remove()这样的函数，因为用T[]所构造的list是一个定长的不能增减的list。

		ArrayAdapter的Filter功能只支持前缀过滤，或以空格分离的前缀过滤（参见android代码）

		在View - Adapter - Dataset的MVC结构构造好以后，App一般只需要操作Adapter就可以实现对 Dataset 的更改和对 View 的刷新。

		在ArrayAdapter的构造函数中：ArrayAdapter(Context context, int resource, int textViewResourceId, List<T> objects)：
			其中：resource为List一个item对应的显示单元的layout
			1） 如没有resource，则使用textViewResourceId对应的View代替。此时mFieldId == 0，所以textViewResourceId对应的整个的View为一个显示单元（TextView）；
			2） 如有resource，则从resource这个layout中找 textViewResourceId（即mFieldId）对应的TextView作为一个显示单元。
			

3.5
		一、
		Android中的数据存储：
		1. 在一个App中：
			1） 数据的种类大体可以分为三种：配置数据、结构化数据、其它一般文件数据（如文本，图片等）；
			2） 数据的存储方式也可以分为三种：SharedPreferences、SQLite、文件；分别对应以上三种数据；
			3） 数据的存储地点：a）内部存储：Android只规定/data/data为app可访问的内部存储目录；如果app的数据放于内部存储器，则方式为
								/data/data/com.decarta.android.geostarter/之下对应的文件夹（db文件夹，cache文件夹，files文件夹等）；
								用Context来获取。
							 b）外部存储：即存在/mnt/sdcard/目录下，用Environment.getExternalStorageDirectory()来获取。
		2. 在App间共享数据：
			必须用Provider来实现；

		二、
		Context：就是app或对象运行的上下文，它包括各种各样的外部功能。
			1） PowerParts中每个进程只有一个Singleton的Context；
			2） 而Android每个进程中也有一个Singleton的Context：Application；但除此之外，每个Activity、Service都继承自Context，所以可以自主在系统中运行。

												Context
													|											
												ContextWrapper
											 _______|____________________
											|				|			|
										Application		Service		Activity

			Application 这个Context一般只处理与整个进程全局相关的事情，如registerReceiver等（一定要记得unregister，否则mem leak）。如果registerReceiver注册在某一个Activity上，则当此Activity被销毁时，也被unregister了。



3.15
		一、静态
		1. 在两种情况下需要使用static关键字：一种是要存储一份唯一的数据，它跟具体的对象没有关系；一种是需要一个跟具体对象无关的函数时；
		  Thinking in java中的原话：
			One is if you want to have only a single piece of storage for a particular field, regardless of how many objects of that class are created, 		or even if no objects are created. The other is if you need a method that isn’t associated with any particular object of this class. That is, 			you need a method that you can call even if no objects are created.

		2. 最好使用类名来引用静态成员，这样编译器有更好的机会来进行代码优化


3.28
		一、
		linux的硬盘布局：(/dev/sda表第一块硬盘，/dev/sda1表第一块硬盘的第一分区)

										+-------------------+          sda start
										|    MBR            |
										+-------------------+
										|partition table    |
										| sda1              |
										| sda2              |
										| sda3              |
										| sda4(logical      |
										+-------------------+
										| extension area    |
										+-------------------+
										|    MBR (sda1)     |
										+-------------------+
										| sda1 volume label |
										+-------------------+
										| extension area    |
										+-------------------+
										| data blocks for   |
										| sda1              |
										+-------------------+
										|    MBR (sda2)     |
										+-------------------+
										| sda2 volume label |
										+-------------------+
										| extension area    |
										+-------------------+
										| data blocks for   |
										| sda2              |
										+-------------------+
										|    MBR (sda3)     |
										+-------------------+
										| sda3 volume label |
										+-------------------+
										| extension area    |
										+-------------------+
										| data blocks for   |
										| sda3              |
										+-------------------+
										|    MBR            |
										+-------------------+
										|logical partition  |
										| table for sda4    |
										|   sda5            |
										|   sda6            |
										+-------------------+
										| extension area    |
										+-------------------+
										|  +--------------+ |<-- data blocks of sda4 logical partition
										|  | MBR (sda5)   | |
										|  +--------------+ |
										|  | sda5 vol name| |
										|  +--------------+ |
										|  | extension    | |
										|  +--------------+ |
										|  | sda5 data    | |
										|  +--------------+ |
										|  | MBR (sda6)   | |
										|  +--------------+ |
										|  | sda6 vol name| |
										|  +--------------+ |
										|  | extension    | |
										|  +--------------+ |
										|  | sda6 data    | |
										|  +--------------+ |
										+-------------------+
										|   any unused      |<--- space that can't be put in a new partiton
										|   sectors         |
										+-------------------+


			二、 LVM 学习：
				1. 概念：
					LVM是在磁盘分区和文件系统之间添加的一个逻辑层，来为文件系统屏蔽下层磁盘分区布局，提供一个抽象的盘卷，在盘卷上建立文件系统（当系统增加硬盘时，由LVM自动合理利用起来）。

							*物理卷pv（physicalvolume）
					　　物理卷就是指硬盘分区或从逻辑上与磁盘分区具有同样功能的设备(如RAID)，是LVM的基本存储逻辑块，但和基本的物理存储介质（如分区、磁盘等）比较，却包含有与LVM相关的管理参数。
					　　
					　　*卷组vg（VolumeGroup）
					　　LVM卷组类似于非LVM系统中的物理硬盘，其由物理卷组成。可以在卷组上创建一个或多个“LVM分区”（逻辑卷），LVM卷组由一个或多个物理卷组成。
					　　
					　　*逻辑卷lv（logicalvolume）
					　　LVM的逻辑卷类似于非LVM系统中的硬盘分区，在逻辑卷之上可以建立文件系统(比如/home或者/usr等)。
					　　
					　　*PE（physicalextent）
					　　每一个物理卷被划分为称为PE(PhysicalExtents)的基本单元，具有唯一编号的PE是可以被LVM寻址的最小单元。PE的大小是可配置的，默认为4MB。
					　　
					　　*LE（logicalextent）
					　　逻辑卷也被划分为被称为LE(LogicalExtents)的可被寻址的基本单位。在同一个卷组中，LE的大小和PE是相同的，并且一一对应。

					系统启动LVM时激活VG，并将VGDA加载至内存，来识别LV的实际物理存储位置。当系统进行I/O操作时，就会根据VGDA建立的映射机制来访问实际的物理位置。


						--------------------------------------------------------------------------
						|<----------------------- 逻辑卷1	 -------------------->||<-- 逻辑卷2	--->|...		（在卷组上的分区，与硬盘分区的区别就是它支持很多操作，如热扩容减容等）
						--------------------------------------------------------------------------
						——————————————————————————————————————————————————————————————————————————
																						卷组																						（逻辑硬盘，用以统一操作所有物理硬盘）
						——————————————————————————————————————————————————————————————————————————
						--------------------------------------------------------------------------
						|<---- 物理卷1	---->||<-物理卷2->||<----------- 物理卷3	------------>|.......			（用以支持物理磁盘的热插拔）
						--------------------------------------------------------------------------

			2. 操作：（使用lvm的前提是需要动态缩放的挂载点（如'/'）对应的设备是逻辑卷，即只能扩展lv的大小）
				////////////////////////////////////////////////////////////////////////////////////////////////////
				///		/boot分区不能位于LVM系统的卷组中，它是引导装载程序无法从逻辑卷中读取。如果想把/分区放在逻辑卷上，					////
				///		必须创建一个与卷组分离的/boot分区(即LV的创建或修改不能影响/boot，/boot独立其之外)。										////
				////////////////////////////////////////////////////////////////////////////////////////////////////

				1）创建分区
　　				使用分区工具（如：fdisk等）创建LVM分区，方法和创建其他一般分区的方式是一样的，区别仅仅是LVM的分区类型为8e。
					每个柱面的字节数为Units的值，一般为8M
									格式化与分区
									hd--IDE设备  sd--SCSI设备
									fdisk -l /dev/sda   查看第一块硬盘分区情况
									 
									fdisk /dev/sdb   给第二块硬盘分区
									command acton (m for help)：m   #显示命令列表
									a-设置可引导标志；b-设置卷标；  d-删除一个分区； n-新建分区
									p-显示分区信息； v-校验分区表；q-不存盘退出；w-存盘退出；t-改变分区类型
									 
									command acton (m for help)：n   新建分区
									command action
										e extended   #扩展分区
										p primary partition (1-4) #主分区
									p      #创建主分区
									partition number (1-4):1  #创建第一个主分区
									first cylinder (1-522,default 1):1  #起始柱面(第一个分区始终为1)
									last cylinder or +size or +sizeM or +siezK(1-522,default 522): 10  #截止柱面(若522则整个硬盘分给了一个区)此分区大小是系统按照柱面大小自动计算出来的
									 
									command acton (m for help)：n
									command action
										e extended  
										p primary partition (1-4)
									p
									partition number (1-4):2  #创建第二个主分区
									first cylinder (11-522,default 11):11
									last cylinder ...(11-522,default 522): +100M  #自定义分区大小
									 
									command acton (m for help)：n
									command action
										e extended  
										p primary partition (1-4)
									e    #创建扩展分区，注意一个磁盘只能创建一个扩展区
									partition number (1-4):3  
									first cylinder (28-522,default 28):28
									last cylinder ...(28-522,default 522):522  #将剩余空间全部分给扩展分区
									 
									扩展分区是不能直接使用的，必须在其上创建逻辑分区！
									command acton (m for help)：n
									command action
										l logical (5 or over)  #逻辑分区
										p primary partition (1-4)
									l
									first sylinder (28-255,default 28):28  #在扩展分区里建逻辑分区
									last cylinder ...(28-522,default 522):522  #柱面用尽，等于说只建一个逻辑分区
									 
									command acton (m for help)：w    #保存退出
									转换分区类型：
									command acton (m for help)：t   #转换分区类型
									partition number (1-4):2   #选择第二个主分区
									hex code (type L to list codes):82  #按L可列出分区类型所对应的编码
									 
									格式化与挂载:  (挂载目录可以自行创建也可指定存在的空目录)
									mkfs.ext3 /dev/sdb1   把第二块硬盘的第一个主分区格式化为ext3
									mkswap /dev/sdb2   初始化swap区，此区不可格式化。
									mount /dev/sdb1 /mnt/d   #将第一个分区挂载到d这个目录
									 
									重启后自动挂载：vi /etc/fstab
									添加：/dev/sdb1    /mnt/d    ext3   default 0 0 




				2）创建物理卷
　　				创建物理卷的命令为pvcreate，利用该命令将希望添加到卷组的所有分区或者磁盘创建为物理卷。
					将整个磁盘创建为物理卷的命令为：
			　　		#pvcreate /dev/hdb
			　　	将单个分区创建为物理卷的命令为：
			　　		#pvcreate /dev/hda5

				3）创建卷组
			　　创建卷组的命令为vgcreate，将使用pvcreate建立的物理卷创建为一个完整的卷组：
			　　#vgcreate volumn_group /dev/hda5 /dev/hdb
			　　第一个参数是该卷组的逻辑名：后面参数是希望添加到该卷组的所有分区和磁盘。vgcreate 还设置使用大小为4MB的PE（默认为4MB）4MB的PE决定了单个逻辑卷最大容量为256GB

				4）激活卷组
			　　为了立即使用卷组而不是重新启动系统，可以使用vgchange来激活卷组：
			　　#vgchange -ay volumn_group

				5）添加新的物理卷到卷组中
			　　当系统安装了新的磁盘并创建了新的物理卷，而要将其添加到已有卷组时，就需要使用vgextend命令：
			　　#vgextend volumn_group /dev/hdc1
			　　这里/dev/hdc1是新的物理卷。

				6）从卷组中删除一个物理卷
			　　先使用pvdisplay命令察看一个该物理卷信息：
			　　如果某个物理卷正在被逻辑卷所使用，就需要将该物理卷的数据备份到其他地方，然后再删除。删除物理卷的命令为vgreduce：
			　　#vgreduce volumn_group /dev/hda1

				7）创建逻辑卷：lvcreate
				　　#lvcreate -L 1500 –n volumn_logic volumn_group
				　　该命令就在卷组volumn_group上创建名字为volumn_logic，大小为1500M的逻辑卷，并且设备入口为/dev/volumn_group/volumn_logic。如果希望创建一个使用全部卷组的逻辑卷，则需要首先察看该卷组的PE数，然后在创建逻辑卷时指定：
				　　
				　　#vgdisplay volumn_group|grep"TotalPE"
				　　TotalPE45230
				　　#lvcreate -l45230 volumn_group -n volumn_logic

				8）创建文件系统
				　　笔者推荐使用reiserfs文件系统，来替代ext2和ext3：
				　　创建了文件系统以后，就可以加载并使用它：
					 # mkdir /data/logicroot
					 # mount /dev/volumn_group/volumn_logic /data/logicroot

						如果希望系统启动时自动加载文件系统，则还需要在/etc/fstab中添加内容：
						/dev/volumn_group/volumn_logic /data/wwwroot reiserfs defaults 1 2

				9）删除一个逻辑卷
					删除逻辑卷以前首先需要将其卸载，然后删除：
					# umount /dev/volumn_group/volumn_logic
					# lvremove /dev/volumn_group/volumn_logic
					lvremove -- do you really want to remove "/dev/volumn_group/volumn_logic"? [y/n]: y
					lvremove -- doing automatic backup of volume group "volumn_group"
					lvremove -- logical volume "/dev/volumn_group/volumn_logic" successfully removed


				10）扩展逻辑卷大小
					LVM提供了方便调整逻辑卷大小的能力，扩展逻辑卷大小的命令是lvextend：
					# lvextend -L12G /dev/volumn_group/volumn_logic
					lvextend -- extending logical volume "/dev/volumn_group/volumn_logic" to 12 GB
					lvextend -- doing automatic backup of volume group "volumn_group "
					lvextend -- logical volume "/dev/volumn_group/volumn_logic" successfully extended
					上面的命令就实现将逻辑卷volumn_logic的大小扩招为12G。

					# lvextend -L+1G /dev/volumn_group/volumn_logic
					lvextend -- extending logical volume "/dev/volumn_group/volumn_logic" to 13 GB
					lvextend -- doing automatic backup of volume group "volumn_group "
					lvextend -- logical volume "/dev/volumn_group/volumn_logic" successfully extended
					上面的命令就实现将逻辑卷volumn_logic的大小增加1G。

					增加了逻辑卷的容量以后，就需要修改文件系统大小以实现利用扩充的空间。笔者推荐使用reiserfs文件系统来替代ext2或者ext3。因此这里仅仅讨论reiserfs的情况。Reiserfs文件工具提供了文件系统大小调整工具：resize_reiserfs。对于希望调整被加载的文件系统大小：

					# resize_reiserfs -f /dev/volumn_group/volumn_logic

					一般建议最好将文件系统卸载，调整大小，然后再加载：
					# umount /dev/volumn_group/volumn_logic
					# resize_reiserfs /dev/volumn_group/volumn_logic
					# mount -treiserfs /dev/volumn_group/volumn_logic /data/wwwroot

					对于使用ext2或ext3文件系统的用户可以考虑使用工具
					ext2resize。http://sourceforge.net/projects/ext2resize

				11）减少逻辑卷大小
					使用lvreduce即可实现对逻辑卷的容量，同样需要首先将文件系统卸载：
					# umount /data/wwwroot
					# resize_reiserfs -s-2G /dev/volumn_group/volumn_logic
					# lvreduce -L-2G /dev/volumn_group/volumn_logic
					# mount -treiserfs /dev/volumn_group/volumn_logic /data/wwwroot



3.30 参考blog
		1. 可用于端口数据截取的工具：wireshark
	
		2. ajax编程：就是用XMLHttpRequest()发送请求后异步接收应答；
			1） 可以给request设置 头行、请求头 属性；而如果是"post"，则还可以在send(Str)中以参数添加发送的内容；
			2） 主要的属性有：readyState，status，responseText，responseXML。
			3） 其中status的值不是http应答中的状态码，所以在本地运行时，它会返回0，而不是200。


4.05
		log4j是一个写log的工具，这个工具提供了强大灵活的log控制，以至于我们不需要自己写代码就可以定制自己需要的log风格。

		1. log4j主要以配置文件来配置。配置文件一般放在src根目录下，它有两种形式：log4j.properties或log4j.xml；但就算是以.properties形式，也可以看出配置文件的.xml树状结构。最上层是以输出目的地来划分配置项。

		2. category:定制的一套配置，相当于一个配置类。
				log4j.rootCategory: 配置父类，如不加说明（没有log4j.additivity.MyCategory = false），所有子类都要继承这些配置；
				log4j.category.*: 表示某个自定义的配置；

				例如：	log4j.rootCategory=INFO, dest1 -----> dest1会输出INFO以上的消息
    					log4j.category.com.zhuyuan.MobileServer=DEBUG -------> 可以以类名包名来命名一套配置，这样就可以清晰地知道这套配置用于哪里
							对于Category categoryLogger = Category.getInstance("com.zhuyuan.MobileServer")会输出DEBUG以上的消息，因为com.zhuyuan.MobileServer继承了根类的设置，输出到dest1
							category写log的函数：public void categoryLogger.log(Priority p, Object message);


		3. log4j主要提供了三大控制功能：
			1）控制输出目的地：到控制台、文件、GUI组件、socket、linux守护进程等；
			2）控制输出级别：分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL七大级别，一般只用其中的ERROR、WARN、INFO、DEBUG四大级别；
			3）控制输出格式：控制日志信息的显示内容，一些格式化信息等。


		4. 使用log4j：需要将commons-logging.jar和logging-log4j-1.2.9.jar导入到classpath中
			1）获得loger：
						public static Logger getLogger( String name); ------------> name参数一般填入本类的名字，以区分每个Loger
						如static Logger logger = Logger.getLogger ( ServerWithLog4j.class.getName () ) ; 

				或：	如果使用commons-logging结合log4j进行日志记录：
						private static Log logger = LogFactory.getLog(Yourclass.class); 

			2）记录log：
				Logger.debug ( Object message ) ;
				Logger.info ( Object message ) ;
				Logger.warn ( Object message ) ;
				Logger.error ( Object message ) ; 

		
4.09
		wifi定位有google的android api发请求得到gps，也有moto的skyhop发请求得到gps；


4.12
		Lucene学习：（详情参考blog）http://lucene.apache.org/core/
		Lucene不是一个完整的全文索引应用，而是是一个用Java写的全文索引引擎工具包，它可以方便的嵌入到各种应用中实现针对应用的全文索引/检索功能。而且由于Lucene良好架构设计，对中文的支持只需对其语言词法分析接口进行扩展就能实现对中文检索的支持。

		1. 全文检索的实现机制
			总体上看：可以先把Lucene当成一个支持全文索引的数据库系统。原理如下：
		a）正向索引机制就相当于一页一页地翻书，来查找正确的词。它就像是一个遍历；
		b）而反向索引机制就是把所有的词都列出来，并排好序，将它的一些属性（如在第几页，第几行，出现次数等）与之对应好，用户通过查词来找到它的属性；也就是一个将模糊查询转换为多个精确查询的组合的过程；

			全文检索就是应用排好序的反向检索机制来进行搜索。因为已经排好序，所以可以应用很多种高效的查找算法。
			所以全文检索的核心问题就是一个排序的问题

		2. 分词问题
			英文的分词很简单，以空格为规则；
			中文的分词有两种，一种是维护一个丰富的词库来进行分词；另外一种就是二分分词，就是所有的语句都用2元语法(bigram)方式切分出来："北京天安门" ==> "北京 京天 天安 安门"。

		3. 使用Lucene：
			1）主要两个面向应用的API模块：org.apache.Lucene.index  和  org.apache.Lucene.search
			2）index模块主要用于输入需要 索引的哪些文件，并生成index文件；输入文件和index文件之间的接口格式为Document；
			3）搜索过程：用Searcher指向索引文件，并用查询分析器作为它的参数，搜索得到结果集hits，然后再根据hits去访问Document中的各种Fields信息；

		4. Lucene的三大接口：
			1）语言分析器(Analyzer)：可以自定义，自带有SimpleAnalyzer 和 StandardAnalyser，但都需要修改才能支持中文的分词；
			2）查询分析器(Query)：通过查询分析接口的实现，可以定制自己的查询语法规则。比如： 多个关键词之间的 + - and or关系等；
			3）搜索器(Searcher)：对Index文件进行查找的实现；

4.15
		grub rescue>set root=(hd0,x)
		grub rescue>set prefix=(hd0,x)/boot/grub
		grub rescue>insmod normal
		rescue>normal -------->若出现启动菜单，按c进入命令行模式
		rescue>linux /boot/vmlinuz-xxx-xxx root=/dev/sdax
		rescue>initrd /boot/initrd.img-xxx-xxx
		rescue>boot


4.17
		一、安装Centos
			1.下载ISO，放于FAT32或ext格式U盘
			2.用gisomount软件mount ISO文件，再将ISO中的文件全部cp到U盘的根目录下；
			3.到U盘中，将isolinux/目录下的isolinux.cfg拷贝成syslinux.cfg文件；
			4.用ubuntu的系统管理里的启动盘创建器生成一个ldlinux.sys文件，也放于isolinux/目录下；
		
		二、计算机启动的引导过程
			硬盘的前512bytes叫做MBR。它由三个部分组成，主引导程序、硬盘分区表DPT（Disk Partition table）和硬盘有效标志（55AA）。
			带boot标志的分区的第一个sector叫做First sector of boot partition。逻辑上1个sector大小为512bytes。
			1. 加电后BIOS读取0柱面0磁道1扇区的MBR中的一级引导程序（MBR中只能存储一个操作系统的引导记录）；
			2. 一级引导程序会读取活动分区中第一个扇区（即First sector of boot partition）的二级引导程序，由二级引导程序来加载具体的OS。
			所以，如果后装的OS装在MBR，将由后装的OS来负责使用grub生成OS选择页面；而如果后装的OS装在First sector of boot partition，则由之前安装的OS负责使用grub生成OS选择页面。

		三、配置CentOS的yum安装库
			1.安装priority这个yum的插件：
				yum install yum-priorities
			2.检查/etc/yum/pluginconf.d/priorities.conf 文件中有：
					[main]
					enabled=1
				并加上以下一行以防止已经废弃(obsoletes)的包的出现
					check_obsoletes=1
			3.安装RPMforge repositories，参考链接：
				http://wiki.centos.org/AdditionalResources/Repositories/RPMForge
			4.安装EPEL repositories
				wget Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm
				rpm -Uvh epel-release-6-8.noarch.rpm
			5.安装remi repositories
				wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
				rpm -Uvh remi-release-6.rpm
				
			4.编辑/etc/yum.repos.d/ 目录中后缀为.repos的文件，以修改库的优先级：
				就是在CentOS-Base.repo文件和rpmforge.repo等repo文件中的每个源下 增加一行：
					priority=N(N是整数，范围从1-99)



4.23
		一、OpenGL理解       参考链接：http://cs.hust.edu.cn/webroot/courses/csgraphics/jiaocai.php?bookpage=7_h
															  http://www.bangchui.org/simple/?t7572.html
				**************** OpenGL要点 ******************
				第一个三：Activity,surfaceview,rendar
				第二个三：render里的三个接口
				第三个三：绘制三要素：顶点数组，两个换算矩阵堆栈，具体的绘制
				第四个三：surface就相当于画布，一个三维的画布；gl就是画笔；rendar就是画画的人；
				***************************************			

				画画的过程就是将一个三维坐标系中的图形，映射到一个设定大小的surface上。这个映射过程分为两步：
				1. 模型视图矩阵变换
					将物体初始三维顶点矩阵乘以模型视图矩阵，得到当前的三维顶点矩阵。主要用以处理物体的运动变化；物体的每一刻的运动变化情况（delta值）由模型视图矩阵的变化反映
					1） 直接定义矩阵
						void glLoadMatrix{fd}（const TYPE *m）；
						void glMultiMatrix{fd}(const TYPE *m);
					2）高级矩阵函数
						(1)平移矩阵函数：void glTranslate{df}(TYPE x，TYPE y，TYPE z)；
							用当前矩阵乘以平移矩阵，参数x，y，z分别是沿三个轴的正向平移的平移矢量。
						(2)旋转矩阵函数：void glRotate{df}(TYPE angle，TYPE x，TYPE y，TYPE z )；
							用当前矩阵乘以旋转矩阵。其中，参数angle表示绕方向矢量逆时针旋转的角度，参数x，y，z则指定旋转轴为由原点到（x，y，z）指定的方向矢量。
						(3)缩放矩阵函数：void glScale{df}(TYPE x，TYPE y，TYPE z)；
							用当前矩阵乘以缩放矩阵，其中不为零的参数x，y，z分别表示三个坐标轴方向的比例因子。注意，当其中某个参数为负值时，可以表示对模型进行相应轴的对称变换。


				2. 投影矩阵变化
					将物体当前的三维顶点矩阵乘以 正投影或透视投影法各自的矩阵，就得到投影到平面的二维顶点矩阵值，这样，才能在surface画布上绘制


		二、OpenGL绘制图形步骤：

			1. OpenGL ES有操作图形渲染管线的函数，这些函数功能的使用状态默认为关闭。 开启这些函数可以用glEnableClientState来完成：
        gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);    

			2. 定点操作：
				1）定义顶点并且转换存储在字节缓冲中。
					eg：一个二维正方形
						 float vertices[] = {    
							 -1.0f, 1.0f, 0.0f, //左上    
							 -1.0f, -1.0f, 0.0f, //左下    
								1.0f, -1.0f, 0.0f, //右下    
								1.0f, 1.0f, 0.0f,  //右上    
						 };  
				2）由一个ByteBuffer创建FloatBuffer，并将顶点数组存入：
					ByteBuffer vbb = ByteBuffer.allocateDirect(vertices.length * 4);  //申请内存  
					vbb.order(ByteOrder.nativeOrder());  //设置字节顺序，其中ByteOrder.nativeOrder()是获取本机字节顺序  
					FloatBuffer vertexBuffer = vbb.asFloatBuffer();  //转换为float型  
					vertexBuffer.put(vertices);  //添加数据，vertices为vertex复数形式
					vertexBuffer.position(0);  //设置缓冲区起始位置  

		    3）将定点数组传给OpenGL，说明启用数组的类型和字节缓冲   
					gl.glVertexPointer(
							 3,						//每个顶点的坐标的维数，这里为3xyz 
							 GL10.GL_FIXED,						//顶点坐标值的类型为GL_FIXED
							 0,						//数组中数据的偏移值 
							 vertexBuffer						//顶点坐标数据数组 );    
        

			3. 绘制（渲染）设定
				1）指定渲染方向：方向决定了多边形的朝向， 即正面和背面。 避免渲染那些被遮挡的部分可以了有效提高程序性能。
						// 设置CCW方向为“正面”，CCW即CounterClockWise，逆时针    
						glFrontFace(GL_CCW);     
						// 设置CW方向为“正面”，CW即ClockWise，顺时针    
						glFrontFace(GL_CW);       
				2）绘制前的其它各种设置：
					 //设置OpenGL的场景大小  
		       gl.glViewport(0, 0, width, height);  
		 
		       float ratio = (float) width / height;  
		       gl.glMatrixMode(GL10.GL_PROJECTION); //设置投影矩阵    
					 glMatrixMode（GL_MODELVIEW） //设置模型视图矩阵
					 还有颜色，视点（gluLookAt）等设置

			4. 开始绘制：
					void glDrawArrays(int mode, int first, int count)
					void glDrawElements(int mode, int count, int type, Buffer indices)
					glDrawArrays创建一个几何图元序列，使用每个被的数组中从first开始，到first + count – 1结束的数组元素， mode为绘制模式。
					glDrawElements使用count个元素定义一个图元序列，type是indices数组中的数据类型，mode为绘制模式，indices数组存储顶点的索引值。

					eg：		gl.glDrawArrays(GL10.GL_TRIANGLES, 0, 3);因为OpenGL ES只能画三角形，所以其它多边形也是用三角形组合
					绘制（渲染）模式有：GL_POINTS、GL_LINE_STRIP、GL_LINE_LOOP、GL_LINES、GL_TRIANGLES、GL_TRIANGLE_STRIP、GL_TRIANGLE_FAN等

			5. 关闭顶点数组图形渲染管线函数    
        gl.glDisableClientState(GL10.GL_VERTEX_ARRAY); 



		三、Android的OpenGL流程：
			1.在Activity中放入一个GLSurfaceView：
				 @Override  
		     public void onCreate(Bundle savedInstanceState) {  
		         super.onCreate(savedInstanceState);  
		         GLSurfaceView  view=new HelloOpenGLES10SurfaceView(this);  
		         setContentView(view);  
		     }  

			2.定义自己的GLSurfaceView，并放入自己的Render：
				 class HelloOpenGLES10SurfaceView extends GLSurfaceView {   
						public HelloOpenGLES10SurfaceView(Context context){  
								    super(context);  
								    setRenderer(new HelloOpenGLES10Renderer());  
								} 
					}
	
			3.定义自己的Render：
				public class HelloOpenGLES10Renderer implements GLSurfaceView.Renderer {  
			
					//这个函数的实现包括 启动渲染函数功能，以及所有初始顶点操作，初始绘制设定等（只被调用一次）
					public void onSurfaceCreated(GL10 gl, EGLConfig config) {}
	
					//surface大小改变时调用，初始创建时surface为0所以会被调用一次
					public void onSurfaceChanged(GL10 gl, int width, int height){}

					//这个函数包括各种顶点变化，绘制设定的刷新，以及所有实际绘制操作，会被循环调用
					public void onDrawFrame(GL10 gl){
							初始会被调用一次。以后会有两种模式供你选择：
							1、 RENDERMODE_CONTINUOUSLY：
							连续不断的刷，画完一幅图马上又画下一幅。这种模式很明显是用来画动画的；
							2、 RENDERMODE_WHEN_DIRTY：
							只有在需要重画的时候才画下一幅，实际就是在调用了 GLSurfaceView的requestRender()后。

							设置模式使用 GLSurfaceView的setRenderMode(int renderMode)方法。
					}

				}  

		四、纹理贴图：
			 1. 创建纹理对象。就是获得一个新的纹理句柄 ID，它对应一个纹理矩阵.
			 2. 指定纹理。就是将数据赋值给 ID 的纹理对象，在这一步，图像数据正式加载到了 ID 的纹理对象（即纹理矩阵）中。
			 3. 设定过滤器。定义了opengl现实图像的效果，如纹理放大时的马赛克消除。
			 4. 绑定纹理对象。就是将 ID 的纹理作为下面操作的纹理。
			 5. 纹理映射。将已绑定纹理的数据绘制到屏幕上去，在这一步，就能看到贴图的效果了。

		五、绘制文字：
			1.
				glRasterPos3f(100,80,0);
				CString   str= "test ";
				glCallLists(str.GetLength(),GL_UNSIGNED_BYTE,str); 
			2.
				把文字先写到Bitmap上，然后贴图上去就可以了！
				贴图的时候换成正交视口！。
4.25
		SOAP学习：
		一、三种使用Webservice的方式：
			1. 远程过程调用（RPC）
				WEB服务提供一个分布式函数或方法接口供用户调用，这是一种比较老的方式。WS-I基本协议集（WS-I Basic Profile）已不再支持远程过程调用。

			2. 面向服务架构（SOA）
				现在，业界比较关注的是遵从面向服务架构（Service-oriented architecture，SOA）概念来构筑WEB服务。在面向服务架构中，通讯由消息驱动，而不再是函数调用。
				UDDI就是在世界范围内标识一项webservice。

				** 此时的webservice也是一种协议，它统一以发送请求应答消息的方式对外提供服务，而消息的格式一般就是基于xml的soap；比如说公司的OpenLS的请求应答xml消息就是一种soap **

			3. 表述性状态转移（REST）
				表述性状态转移式（Representational state transfer，REST）WEB服务类似于HTTP或其他类似协议，它们把接口限定在一组广为人知的标准动作中（比如HTTP的GET、PUT、 DELETE）以供调用。此类WEB服务关注与那些稳定的资源的互动，而不是消息或动作。
				此种服务可以通过WSDL来描述SOAP消息内容，通过HTTP限定动作接口；或者完全在SOAP中对动作进行抽象。


		二、SOAP概念：
			简单对象访问协议，它是一种轻量的、简单的、基于 XML 的协议（消息格式为XML），它被设计成在 WEB 上交换结构化的和固化的信息。可以承载在HTTP/HTTPS/TCP/UDP等各种协议之上
			
			之所以说是对象，是因为把访问的Web服务称为对象，既然服务是对象，那么服务肯定有相关的属性和调用行为，这些属性和行为是通过WSDL来描述的。如果按“简单的对象访问协议”来理解，相比“简单对象访问协议”要容易些。

		三、SOAP结构：
			1. SOAP 包括四个部分：
				* SOAP 封装（envelop），它定义了一个框架，描述消息中的内容是什么，是谁发送的，谁应当接受并处理它以及如何处理它们；
				* SOAP 编码规则（encoding rules），它定义了一种序列化的机制，用于表示应用程序需要使用的数据类型的实例；
				* SOAP RPC表示（RPC representation），它定义了一个协定，用于表示远程过程调用和应答；
				* SOAP 绑定（binding），它定义了SOAP使用哪种协议交换信息。使用HTTP/TCP/UDP协议都可以。

			2. SOAP 消息结构：
							__________________________________
							|				 soapenv：Envelope					|
							|      ______________________			|
							|			|											|			|
							|			|	soapenv：Header(可选)	|			|
							|			|_____________________|			|
							|																	|
							|			______________________			|
							|			|											|			|
							|			|											|			|
							|			|											|			|
							|			|		 soapenv：Body			|			|
							|			|											|			|
							|			|											|			|
							|			|_____________________|			|
							|_________________________________|




4.27 
		SVN服务器备份：
			sen@ubuntu:/media/新加卷_/svn/sync/branches$		svnadmin create ./WebServices/
			sen@ubuntu:/media/新加卷_/svn/sync/branches$		chmod 777 WebServices/
			sen@ubuntu:/media/新加卷_/svn/sync/branches$		cd hooks/
			sen@ubuntu:/media/新加卷_/svn/sync/branches$		cp pre-revprop-change.tmpl pre-revprop-change
			sen@ubuntu:/media/新加卷_/svn/sync/branches$		gedit pre-revprop-change
			sen@ubuntu:/media/新加卷_/svn/sync/branches$ 		svnsync init file://localhost/media/新加卷_/svn/sync/branches/WebServices http://subversion.sanjose.telcontar.com/svn/branches/WebServices
			sen@ubuntu:/media/新加卷_/svn/sync/branches$		svnsync sync file://localhost/media/新加卷_/svn/sync/branches/WebServices --username username --password password 
		如果发生
			sen@ubuntu:/media/新加卷_/svn/sync/branches$		svnsync: Couldn't get lock on destination repos after 10 attempts 
		则手动使用改命令解锁
			sen@ubuntu:/media/新加卷_/svn/sync/branches$		svn propdel svn:sync-lock --revprop -r0 file://localhost/media/新加卷_/svn/sync/branches/WebServices 




5.27~28
		复习c++ stl：c++ primer：list与vector，map与set
		复习socket server设计
		学习Boost：
		学习xml、soap、

		Boost学习：Boost有许多有用的工具库，包括字符串处理库，智能指针库，标准线程库
		一、智能指针：
				1. shared_ptr:	引用计数
					 shared_array:
				2. scoped_ptr:	从boost::noncopyable继承来完成这个实现（即用singleton来实现）
					 scoped_array:
				3. auto_ptr:	对象指针赋值给另外一个指针后，原指针不可用

		二、c++线程库
				基于OS的多线程编程主要有两个问题：a）它们都是基于c语言的，用在c++中时要注意很多问题；b）都是基于具体的OS，没有可移植性
				1. 多线程间的互斥（上锁：mutex）

						------------------------------------------------------------------------------
						两类	\	三种			| 一直等到无其它线程  |   如果有其它线程上锁		 |  同步锁，但有超时时间，
						互斥体\	 互斥方法	|	对其上锁，即同步锁  |		 立刻返回，即异步锁		 |  超时后返回
						-------------------------------------------------------------------------------
						 simple mutex |     mutex        |	try_mutex					 |		timed_mutex
						 (简单互斥)			|									 |										 |
						-------------------------------------------------------------------------------
						 rescur mutex |	 recursive_mutex | recursive_try_mutex |	recursive_timed_mutex
						 (递归互斥)			|									 |										 |
						-------------------------------------------------------------------------------

				2.条件变量

		三、字符串处理：如将string类转成整数，或整数转成string等（lexcial_cast ）
				

6～7月：Spring学习


7.14
		./catalina.sh jpda start相当于启动一个服务端socket，默认监听8000；然后eclipse远程调试启动client socket，与8000连接成一个调试通道。当http请求到达远程Tomcat后，通过socket调试通道发送到eclipse中调试的webapp。
		使用jpda调试webapp要注意两个问题：第一个就是调试的代码要跟服务器上部署的class文件要一致；第二就是要在catalina.sh中的JPDA_OPTS加上-Xdebug这一项
		今天远程调试失败的两个原因就是：1. 刚刚从Tomcat的lib文件夹中删掉了struts2的jar，却没有在部署的MobileServer上加上相应的jar；
															2. 就是没有加上-Xdebug选项



8.15

	cache 和 buffer的区别：

	　　1. Cache：高速缓存，是位于CPU与主内存间的一种容量较小但速度很高的存储器。由于 CPU的速度远高于主内存，CPU直接从内存中存取数据要等待一定时间周期，Cache中保存着CPU刚用过或循环使用的一部分数据，当CPU再次使用该部分数据时可从Cache中直接调用,这样就减少了CPU的等待时间,提高了系统的效率。Cache又分为一级Cache(L1 Cache)和二级Cache(L2 Cache)，L1 Cache集成在CPU内部，L2 Cache早期一般是焊在主板上,现在也都集成在CPU内部，常见的容量有256KB或512KB L2 Cache。

	　　2. Buffer：缓冲区，一个用于存储速度不同步的设备或优先级不同的设备之间传输数据的区域。通过缓冲区，可以使进程之间的相互等待变少，从而使从速度慢的设备读入数据时，速度快的设备的操作进程不发生间断。

	　　3. Free命令中的buffer和cache：（它们都是占用内存）：
			　　buffer : 作为buffer cache的内存，是块设备的读写缓冲区
			　　cache: 作为page cache的内存, 文件系统的cache
			　　如果 cache 的值很大，说明cache住的文件数很多。如果频繁访问到的文件都能被cache住，那么磁盘的读IO bi会非常小。


9.15
   操作系统的四层结构
	 从用户程序角度看的中断处理，就相当于一个系统调用，调用的中断服务程序：信号量统一同步用户进程 与 I/O任务的进程状态，以让调度程序统一调度。首先用户进程阻塞，用信号量通知I/O任务就绪；然后I/O任务结束后阻塞，用信号量通知用户进程就绪，由调度程序统一调度

	 APR,就是一个便携式运行时，它的目的就是提供一个包括APR所有FEATURE的通用接口。如果某个FEATURE不能被所有OS支持，那这个FEATURE要对应一个宏，在某个OS上那些被支持的FEATURE的宏都被定义为1，否则为0. 


10.3
		今天终于解决实际部署在Tomcat上时无法发送geocoding请求的问题，即无法JAXB解析的问题：原因就是少了relaxngDatatype.jar这一个包而已。。。
		另外，还有一个问题就是JDK1.6以上都已经自带JAXB-API2.0，会与用户自己的jaxb冲突。如果webapp要用自己的更新的jaxb，就必须在jre/lib/下增加一个endorsed文件夹，将自己的jaxb包放入，jdk会认为这个文件夹中的包是升级包。



2013

3.23
今天导致看不到地图的四个原因：
1. /dds/OpenLS/jre/lib/下多了一个endorsed文件夹，放置了新的jaxb四个包，导致DDS启动时无法load startServer.xml文件，从而DDS无法启动
2. /dds/OpenLS/lib下的hsqldb启动jar包当前是hsqldb-2.0.0-rc8.jar，而根据启动脚本应该是hsqldb-1.8.0.2.jar，不然hsqldb无法启动
3. tomcat需要手动启动 ./startTomcat.sh &
4. /map1/下面地图被删掉了，导致js无法浏览地图

3.24
1. 整理dds的整体配置：
  1）DDS启动时通过startServer.xml启动ddscluster.xml集群配置
  2）ddscluster.xml分别使用master.cfg与各个slaver的.cfg文件启动DDS的master主机和各个slaver主机
  3）各个主机的.cfg文件都会指定各自的dataset.cfg
  4）Img主机还会指定其各种Img配置文件
2. DDS的MainInit()函数中就是读取其主机.cfg的各个section([Module]等)来配置启动的DDS。注意：ddscluster.xml中每个主机都会执行一遍这里的启动流程。

3.26
要从配置中清除EMAPGO的东西，需要将dataset.cfg与ddserver-imageSlave.cfg中跟EMAPGO相关的东西全部清除。


4.5
顺利为broadcom4313的无线网卡安装驱动
1. 下载无线网卡驱动：http://www.broadcom.com/support/802.11/linux_sta.php
2. 解压编译后得到wl.ko文件，放到/lib/modules/`uname -r`/kernel/drivers/net/wireless/目录下
3. 安装驱动：
  insmod wl.ko
  modprobe wl
  （rmmod、lsmod | grep wl 、 lspci -v 、ifconfig、 iwconfig、）
4. 安装不成功原因：居然是因为/etc/sysconfig/下的network文件缺失
  找到原因的过程：
  1）ifconfig eth0 up启用网卡
  2）iwlist eth0 scanning发现网卡可以正常找到wifi网络
  3）chkconfig NetworkManager on
  4）service NetworkManager start时报NetworkManager第35行错，最后发现是network文件不存在

参考链接：
http://blog.sina.com.cn/s/blog_6daad9bd0100mrl9.html

4.9
今天webservice无法启动，是因为./startTomcat.sh中引用的/usr/bin/java是老版本的jvm，需要用新的java替换。

软件版本管理alternatives：
linux的软件引用一般分为三层：/usr/bin/java -> /etc/alternatives/java -> /usr/lib/jvm/jre-1.4.2-gcj/bin/java

要把一个软件放置到alternatives下管理：
     1）alternatives --install /usr/bin/java java /usr/java/jre1.6.0_21/bin/java  400
	alternatives --install /usr/bin/java  java  /usr/java/jdk1.6.0_21/bin/java  400
	alternatives --install /usr/bin/javac javac /usr/java/jdk1.6.0_21/bin/javac 400
	注解：第一个参数如/usr/bin/javac表示shell调用的程序的链接， javac 表示在目录/etc/alternatives/下的链接名，最后的/usr/java/jdk1.6.0_21/bin/javac表示某一特定版本的程序

     2）此时alternatives --config java会显示所有加入的软件版本，并可以选择当前使用哪个版本：


5.6
安装mysql：
yum install mysql
yum install mysql-server
yum install mysql-devel
chgrp -R mysql /var/lib/mysql
chmod -R 770 /var/lib/mysql
service mysqld start



6.2
GPS定位的距离参数（即locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 30000, 10f, this);中的10f）只在同一次ProviderEnable时有效，Disable一次后，就算是同一个位置，也会引起onLocationChanged()。



7.20
思考操作系统时可以从cpu运行的角度去思考，想象cpu如何执行系统的初始化，如何进入idle，如何调用进程调度程序，如何做虚拟内存到物理内存的转换，如何做IPC通信，如何处理中断等等

8.17
拷贝MobileService:
1. 拷贝WebContent下所有到webapps/MobileService/下
2. 拷贝build/classes到webapps/MobileService/WEB-INF/下

2013.9~2014.2: Apache FastCGI学习

2014.2.19:
采用tomcat7.0.29替换OpenLS的Tomcat6. LocationServerJava正常，但MobileService无法登录注册，因为tomcat7.0.29的lib/下缺少mysql的驱动jar包。加上就好了。


3.10:
学习Linux的用户管理：
	Linux下有三类用户：
		1.超级用户： root 具有操作系统的一切权限， UID为0
		2.系统进程保留用户： 是为了方便系统管理，满足相应的系统进程文件属主的要求，不能用于具体使用者登录系统，UID为1--499
		3.普通用户：具有操作系统有限的权限 UID为500—6000
		
 
	Linux通过 /etc/passwd进行用户管理，在此文件中只定义账号，不定义口令。一行定义一个用户，分为七个部分:
		第一列为账号名称，
		第二列为用户密码(密码不在此定义)，
		第三列为用户标识码(UID)，用来确认用户身份
		第四列为用户所在Group的表示(用户组ID)，
		第五列为用户相关信息(如root)，
		第六列为用户家目录(/root),
		第七列为用户的环境(用户使用的shell)
		
	更改Group:
		chgrp [-r] newgroup /path/file
	更改User:
		chown [-R] 账号名称[：用户组名称] 文件或目录
		eg: chown root:root install.log
	更改权限：
		chmod 777 director/file //第一个7为user权限，第二个7为同group权限，第三个7为others的权限
	
	
3.17
	1. 敏捷开发方法：
		可以从两方面来阐述：
		1）从事情（项目）的角度来说，就是将一个大的项目进行分析设计，分成多个相对独立的小模块、小周期。形成一个详细的需求列表，然后分配给不同的开发人员。这样就可以以一种小步快跑的方式推进项目进度。另外也可以做到需求的灵活调整。
		2）从人的角度来说，每一个开发人员都是一个独立的开发单位，他可以独立地与客户沟通需求细节，自主采用工作方法。
	
	
	2. 中间件的概念：
		主要用于实现应用系统的可移植性、封装应用系统之间的消息通信、粘合新旧系统、各种异构系统。可以降低开发成本，保护已有开发成果。
		主要有：
			1）数据访问中间件：对异构环境下的数据库实现联接或文件系统实现联接的中间件
			2）处理类:把分布在网络结点上的各个应用或处理连接在一起，形成一个统一的分布式应用
			3）消息中间件：JMS（Java Message Service）成为目前消息中间件事实上的标准。
				消息中间件有点对点的模式，也有发布/订阅模式。就相当于PowerParts的消息框架一样，是一个等待client连接的消息中转server，它提供消息的存储。Powerparts只是相当于点对点模式，还有发布/订阅模式，消息就不是缓存在queue中，而是存在Topic中。
				
				
			
	
	
	
	
	
	
