操作系统主要两个作用：
1. 作为虚拟机
2. 作为资源管理器

操作系统主要三块内容：
1. 进程管理
2. 内存管理
3. I/O与文件管理


操作系统的学习角度：
1. 外部特性：通过它的系统调用来观察
	1） 进程相关系统调用
	2） 文件有关系统调用
2. 内部实现：最先进的客户-服务器模型。
所有的应用程序都是一个client进程。所有的系统功能由server进程来提供。两者都是运行于用户态。
内核高度精简，它只提供由client到server之间的通信；以及访问硬件等需要内核态才能够完成的功能（这个也可由一个独立的运行于内核态的server进程实现）。
机制(mechanism)和策略(policy)：类似于 面向接口编程与多态的设计。


第一章 进程管理
与进程有关的所有信息都存在两个地方：进程地址空间 与 进程表的对应表项中

第一节 进程模型 与 线程模型：
	1. 进程的层次结构：如init作为root进程fork每个终端进程；每个终端进程登录成功后执行shell程序来fork更多的子进程

	2. 进程的状态： 运行态，就绪态，阻塞态
	3. 进程集：就是一个多道进程并行推进的一个模型
	4. 进程的管理：用调度程序来管理进程集的状态和推进，调度程序需要实现的三个功能：
		1）调度管理	--> 运行态与就绪态之间的切换
		2）中断处理 --> 阻塞态与运行就绪之间的切换
		3）进程间通信

	2. 线程与线程表
	5. 往进程中添加线程所引入的大量待解决问题

第二节 进程模型的实现（即对应上面问题的解决方案）
	一、 如何记录每个进程的状态信息：操作系统维持着一个进程表，每个进程对应其中一项
		每个进程表项都有多个域，它们分别由进程管理、内存管理、文件管理等模块负责写入，调度程序统一读所有的域来进行进程集的管理

	二、 中断处理的实现： 每类I/O设备都有一个靠近内存底部的位置，称为中断向量。指向各自的中断服务程序
		磁盘中断的处理过程：
			1）进程开始读磁盘操作，发生磁盘中断，进程阻塞
			2）中断硬件将进程数据压栈，并跳转到中断服务进程
			3）中断服务进程将压栈数据出栈，并存入进程表
			4）中断服务进程发送中断消息给磁盘进程，收到特殊的磁盘中断消息以后，磁盘进程将会从阻塞态变为就绪态
			5）中断服务进程调用调度程序重新进行调度

	三、 进程间通信的实现	
			1）竞争条件问题：即两个或多个进程读写某些共享数据，最后的结果取决于进程运行的精确时序的问题。
			2）竞争条件问题的解决：引发竞争条件问题的那部分代码片段就叫做 临界区。所以解决竞争条件问题的根本就是解决临界区的互斥进入，所以操作系统需要提供实现互斥的原语。
			1. 互斥算法正确的标准：
				1）任何两个进程都不能同时处于临界区		
				2）只有临界区内的进程才能阻塞别的进程
				3）临界区内的进程不能一直阻塞别的进程

			2. 两种正确而实用的互斥算法：
				1）Peterson算法
				2）TSL指令
				对两种算法的改进就是用 SLEEP()来取代 无限循环。这样就不会有优先级翻转问题。


























