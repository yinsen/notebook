1.  为什么使用 shell 编程 
2.  带着一个 Sha‐Bang 出发(Sha‐Bang 指的是#!) 
        2.1.  调用一个脚本 
        2.2.  初步的练习 
3.  特殊字符 
4.  变量和参数的介绍 
        4.1.  变量替换 
        4.2.  变量赋值 
        4.3.  Bash 变量是不分类型的 
        4.4.  特殊的变量类型 
5.  引用(翻译的可能有问题,特指引号) 
        5.1.  引用变量 
        5.2.  转义(\) 
6.  退出和退出状态 
7. Tests 
        7.1. Test 结构 
        7.2.  文件测试操作 
        7.3.  其他比较操作 
        7.4.  嵌套的 if/then 条件 test 
        7.5.  检查你的 test 知识 
8.  操作符和相关的主题 
        8.1.  操作符 
        8.2.  数字常量 
9.  变量重游 
        9.1.  内部变量 
        9.2.  操作字符串 
        9.3.  参数替换 
        9.4.  指定类型的变量:declare 或者 typeset 
        9.5.  变量的间接引用 
        9.6. $RANDOM:  产生随机整数 
        9.7.  双圆括号结构 
10.  循环和分支 
        10.1.  循环 
        10.2.  嵌套循环 
        10.3.  循环控制 
        10.4.  测试与分支(case 和 select 结构) 
11.  内部命令与内建 
        11.1.  作业控制命令 
12.  外部过滤器,程序和命令 
        12.1.  基本命令 
        12.2.  复杂命令 
        12.3.  时间/日期  命令 
        12.4.  文本处理命令 
        12.5.  文件与归档命令 
        12.6.  通讯命令 
        12.7.  终端控制命令 
        12.8.  数学计算命令 
        12.9.  混杂命令 
13.  系统与管理命令 
        13.1.  分析一个系统脚本 
14.  命令替换 
15.  算术扩展 
16. I/O  重定向 
        16.1.  使用 exec 
        16.2.  代码块的重定向 
        16.3.  应用 
17. Here Documents 
        17.1. Here Strings 
18.  休息时间 
19.  正则表达式 
        19.1.  一个简要的正则表达式介绍 
        19.2.  通配 
20.  子 shell(Subshells) 
21.  受限 shell(Restricted Shells) 
22.  进程替换 
23.  函数 
        23.1.  复杂函数和函数复杂性 
        23.2.  局部变量 
        23.3.  不使用局部变量的递归 
24.  别名(Aliases) 
25.  列表结构 
26.  数组 
27. /dev  和  /proc 
        27.1. /dev 
        27.2. /proc 
28.  关于 Zeros 和 Nulls 
29.  调试 
30.  选项 
31. Gotchas 
32.  脚本编程风格 
        32.1.  非官方的 Shell 脚本风格 
33.  杂项 
        33.1.  交互式和非交互式的 shells 和脚本 
        33.2. Shell  包装 
        33.3.  测试和比较:  另一种方法 
        33.4.  递归 
        33.5.  彩色脚本 
        33.6.  优化 
        33.7.  各种小技巧 
        33.8.  安全话题 
						33.8.1.被感染的脚本 
						33.8.2.  隐藏 Shell 脚本源码 
        33.9.  移植话题 
        33.10.  在 Windows 下进行 Shell 编程 
34. Bash,  版本  2  和  3 
        34.1. Bash,  版本 2 
        34.2. Bash,  版本 3 



第一章：概述

  shell是一种脚本，就是一个以 系统调用、例程、命令或其它所有二进制程序 为调用对象的更高层面的程序语言。（像c语言只能调用函数）
	shell解释执行，就像js一样，用特定的解释器解释执行
	shell也支持顺序、选择、循环 三种基本程序结构，支持变量概念。
	shell可以用于将一个大的程序分解成多个灵活简单的小程序。建议对shell脚本进行模块化设计，平时多收集些小片段
  Linux系统管理也主要是通过shell脚本来进行。例如，在启动过程中，机器就会根据/etc/rc.d/下的脚本来 配置机器 以及 启动需要的服务。
	根据惯例,用户编写的Bourne shell脚本应该在脚本的名字后边加上.sh扩展名. 一些系统脚本,比如那些在/etc/rc.d中的脚本,则不遵循这种命名习惯


第二章：简单的shell程序
	最简单的shell程序就是一个个命令的顺序列举：
			1.  #!/bin/bash								
					1)#!用于标记这个文件的类型是一个可执行的脚本，并且由后面指定的/bin/bash来负责解释执行，如 #!/bin/sh；#!/bin/bash；#!/usr/bin/perl；等等。如果指定的解释器没有，则返回"Command not found"
					2)没有它就只能是一些命令的集合，不能使用shell的内建指令
					
					

			LOG_DIR=/var/log  				# 如果使用变量,当然比把代码写死的好.

			cd $LOG_DIR
			cat /dev/null > messages
			cat /dev/null > wtmp
			echo "Logs cleaned up."
			exit 											# 这个命令是一种正确并且合适的退出脚本的方法.

		2. 如何执行一个脚本
			sh scriptname	（这种方式调用脚本的时候将会关闭一些Bash特定的扩展,脚本可能因此而调用失败.比如它会禁止stdin）
			或
			bash scriptname
			或
			chmod 555 scriptname（可读可执行）
			之后 ./scriptname

		3. 脚本放入/usr/local/bin目录下，这样所有的用户就都可以执行它了


第三章：基本shell语法符号
		

	二、 三大基本程序结构，顺序，选择（if，case），循环（for，while）

	三、 基本语法符号

		1. #
					1）注释
					2）echo ${PATH#*:}					# 参数替换,不是一个注释
					3）echo $(( 2#101011 )) 		# 数制转换,不是一个注释

		1. 点号. 
			1). 命令等价于 source 命令(见 Example 11-20).这是一个 bash 的内建命令。
				source FileName 	#  在当前bash环境下读取并执行FileName中的命令
					如：source .bash_rc 与 . .bash_rc 是等效的。

			2). 用于字符匹配,这是作为正则表达是的一部分,用来匹配任何的单个字符.

		2. ;
			命令分隔符,可以用来在一行中来写多个命令.

		3. ;;
			终止"case"选项.


		4. " 
			部分引用."STRING"阻止了一部分特殊字符

		5. '
			全引用. 'STRING' 阻止了全部特殊字符,


		1. 逗号链接了一系列的算术操作,虽然里边所有的内容都被运行了,但只有最后一项被返回.
		如:
		let "t2 = ((a = 9, 15 / 3))"        # Set "a = 9" and "t2 = 15 / 3"

		2. 冒号：
			1）空命令，什么也不干的命令，也可以认为是shell的内建命令true，如：
					while :（等同于while true）
						do
							operation-1
							...
							operation-n
						done
			2）在if/then中的占位符,如:
					if condition
						then :   # 什么都不做,引出分支.
					else
						take-some-action
					fi
			3）和 > (重定向操作符)结合使用时,把一个文件截断到0长度,没有修改它的权限.如果文件在之前并不存在,那么就创建它.
					 : > data.xxx    #文件"data.xxx"现在被清空了（等同于cat /dev/null >data.xxx）

		3.	?		测试操作.在一个确定的表达式中,用?来测试结果.(())结构可以用来做数学计算或者是写c代码,那?就是c语言的3元操作符的一个.
						在"参数替换"中,?测试一个变量是否被set了.
				 ?	在file globbing中和在正则表达式中一样匹配任意的单个字符.

		4.	$		变量替换
				$		在正则表达式中作为行结束符.
				$$	进程ID变量.这个$$变量保存运行脚本进程ID

		5.	()		命令组，相当于一个函数.如:(a=hello;echo $a)
						在()中的命令列表,将作为一个子shell来运行.
						在()中的变量,由于是在子shell中,所以对于脚本剩下的部分是不可访问的（相当于局部变量）.
				() 	用于数组初始化，如：Array=(element1,element2,element3)

		6.	{}	用于括住以','分隔的条目时，相当于提取公因式的意思，如：
							cat {file1,file2,file3} > combined_file 		相当于			cat file1 > combined_file；cat file2 > combined_file；cat file3 > combined_file
							cp file22.{txt,backup}											相当于			cp file22.txt file22.backup
	
				{}	用于分隔代码块时，也是相当于一块公因式代码块，如：（但里面的变量也不是局部变量，除非用local声明）
							{
							 read line1
							 read line2
							} < $File

		7.	[]  用于test，如if语句，while语句等
				
				 []		数组元素，如：Array[1]=slot_1
	
				[]		字符范围，在正则表达式中使用,作为字符匹配的一个范围

		7.	(())	数学计算的扩展
							在(())结构中可以使用一些数字计算.
							具体参阅((...))结构.

		8.	重定向
						scriptname >filename 重定向脚本的输出到文件中.覆盖文件原有内容.
						command &>filename 重定向stdout和stderr到文件中
						command >&2	重定向command的stdout到stderr
						scriptname >>filename 重定向脚本的输出到文件中.添加到文件尾端,如果没有文件,则创建这个文件.

						<<		重定向,用在"here document"
						<<<		重定向,用在"here string"

		9.	 \<,\>	正则表达式中的单词边界.如: bash$grep '\<the\>' textfile


		10.	 |		管道.分析前边命令的输出,并将输出作为后边命令的输入.这是一种产生命令链的好方法.
							如：
							cat *.lst | sort | uniq			# 合并和排序所有的".lst"文件,然后删除所有重复的行.

							管道是进程间通讯的一个典型办法,将一个进程的stdout放到另一个进程的stdin中. 也可以将一个shell的输出作为另一个shell的输入
							标准的方法是将一个一般命令的输出,比如cat或echo,传递到一个过滤命令中(在这个过滤命令中将处理输入),得到结果,
							如:
							cat $filename1 | $filename2 | grep $search_word

		11.	 >|	强制重定向

		12.  ||	或-逻辑操作.

		13.	 &		后台执行

		14.  &&	与-逻辑操作

		15.  -		命令参数

					 -	用于重定向 stdin 或 stdout，如：
							(cd /source/directory && tar cf - . ) | (cd /dest/directory && tar xpvf -)

							tar cf - .              'c'创建一个新文档,'f'后边跟'-'指定目标文件作为stdout,'-'后边的'f'(file)选项,指明作为stdout的目标文件.
														             并且在当前目录('.')执行.
						  ( ... )                 	一个子shell
						  tar xpvf -              'x'解档,'p'保证所有权和文件属性,
																		 	'v'发完整消息到stdout
													           	'f'后边跟'-',从stdin读取数据
													           	注意:'x' 是一个命令, 'p', 'v', 'f' 是选项.
		16.	 +		选项,对于特定的命令来说使用"+"来打开特定的选项,用"-"来关闭特定的选项.

		17.	 =		算术等号,有时也用来比较字符串.

		18.  ~+		当前工作目录,相当于$PWD变量

		19.  ~-		之前的工作目录,相当于$OLDPWD内部变量.

		20.	 ^		行首,正则表达式中表示行首."^"定位到行首.

		21.	 空白
				分割命令或者是变量.包括空格,tab,空行,或任何它们的组合.（像c语言一样，不管多少个空格tab空行，都将自动变成一个空格。除非用""将它括起来）
				在一些特殊情况下,空白是不允许的,如变量赋值时,会引起语法错误.
				空白行在脚本中没有效果.

		注意：
				在pipe中的一个大括号中的代码段可能运行在一个子shell中.
				ls | { read firstline; read secondline; }			#错误,在打括号中的代码段,将运行到子shell中.
				#+ 所以ls的输出将不能传递到代码块中.
				echo "First line is $firstline; second line is $secondline"  # 不能工作


第四章 变量和参数
        4.1.  变量替换 
        4.2.  变量赋值 
        4.3.  Bash 变量是不分类型的 
        4.4.  特殊的变量类型 
	shell脚本里的全局变量，就是OS的环境变量；局部变量就是，见23章
	每个shell脚本都可以声明自己的环境变量，执行期间更新原有的环境变量；这些变量也会影响所有由此shell生成的子进程
	只有在变量被声明,赋值,unset或exported或者是在变量代表一个signal的时候,变量才会是以本来的面目出现在脚本里.
	变量在被赋值的时候,可能需要使用"=",read状态或者是在循环的头部.

		一、变量替换
			1.引用一个变量将保留其中的空白,如果是变量替换就不会保留了.
				hello="A B  C      D"
				echo $hello   # A B C D
				echo "$hello" # A B  C      D

				""表示里面的作为一个字符串

			2. 一个空值变量,或者是根本就没声明的变量,在赋值之前使用它可能会引起问题. 但是还是可以用来做算术运算
				如：
					echo "$uninitialized"                                # (blank line)
					let "uninitialized += 5"                             # Add 5 to it.
					echo "$uninitialized"                                # 5


		二、变量赋值
			1. = 它有两种含义，一种就是赋值，一种就是测试，同-eq
			2. 什么时候，变量不需要$：
				1）赋值的时候，
				2）作为循环变量时，
				3）read时：
						echo -n "Enter \"a\" "
						read a
						echo "The value of \"a\" is now $a."

			3. 用表达式赋值：
				1）
						a=`echo Hello!`   # 把echo命令的结果传给变量a
						echo $a
				2）
						a=`ls -l`         # 把ls -l的结果给a
						echo $a           # 别忘了,这么引用的话,ls的结果中的所有空白部分都没了(包括换行)
						echo "$a"         # 这么引用就正常了,保留了空白
		
			4. 使用$(...)机制进行变量赋值
				# 来自于/etc/rc.d/rc.local
				R=$(cat /etc/redhat-release)
				arch=$(uname -m)


		三、变量类型，shell中的变量都是无类型的
			shell中变量默认都是string类型，但如果只有数字的话，就会变为整型

			a=2334                   # 整型
			let "a += 1"
			echo "a = $a "           # a = 2335,还是整型

			b=${a/23/BB}             # 将23替换成BB，这将把b变量从整型变为string
			echo "b = $b"            # b = BB35
			declare -i b             # 即使使用declare命令也不会对此有任何帮助,9.4节有解释
			echo "b = $b"            # b = BB35

			let "b += 1"             # BB35 + 1 =
			echo "b = $b"            # b = 1

			c=BB34
			echo "c = $c"            # c = BB34
			d=${c/BB/23}             # S将BB替换成23，这使得$d变为一个整形
			echo "d = $d"            # d = 2334
			let "d += 1"             # 2334 + 1 =
			echo "d = $d"            # d = 2335



		四、	特殊变量
			1. local变量&envirope变量：
					1）export变量：
					export命令将会使得被export的变量在运行的脚本(或shell)的所有的子进程中都可用.
					因为OS所有的进程都是启动进程的子进程，所以一个重要的使用就是用在启动文件中,启动文件是用来初始化并且设置环境变量,让用户进程可以存取环境变量.

			2. 参数变量： $0,$1,${10}...
					1）通常使用variable1_=$1_ ， 而不是 variable1=$1。这样可以避免空参数错误
						然后再替换掉多出来的_ ：		variable1=${variable1_/_/}
					
					2）也可以先进行参数判空：
						if [ -z $1 ]
						then
						exit $E_MISSING_POS_PARAM

					3）shift：
						重新分配位置参数,其实就是向左移动一个位置：
							$1 <--- $2, $2 <--- $3, $3 <--- $4, 等等.
						老的$1 将消失,但是$0(脚本名)是不会改变的.如果使用了大量的位置参数,那么shift 命令允许你存取超过 10 个参数.虽然{}表示法也允许这样.


第五章 引号""
		引号的作用就是将里面的所有字符（除 $ '' \ 三个字符）都解释为字符本身，而不是shell的关键字符，如'*','#'等等
		
		还有一个作用就是保护命令行中的参数
		一、引号在参数列表中的作用：
				variable2=""																				# 空值
				COMMAND $variable2 $variable2 $variable2						# COMMAND 将不带参数执行
				COMMAND "$variable2" "$variable2" "$variable2" 			# COMMAND 将以 3 个空参数来执行
				COMMAND "$variable2 $variable2 $variable2"					# COMMAND 将以 1 个参数来执行(2空格的字符串)

				用双引号把参数封到 echo 中是很有必要的，这样可以保证参数按原样输出

		二、单引号：
				单引号操作总体上和""很像,但不允许引用变量.因为$的特殊含义被关闭了.
				在'中除了",其他字符都没有特殊的含义了.所以单引号比双引号严格.


		三、转义符 \:
				1.	转义符用于告诉shell，这个字符不是特殊字符，而是字符本身。 
						\" 	表达"本身
						 echo "Hello"				# Hello
						 echo "\"Hello\", he said."			# "Hello", he said.

						\$ 	$号本身,跟在\$后的变量名,将不能扩展
								echo "\$variable01" # 结果是$variable01

						\\ 	\号本身
								echo "\\" # 结果是\
								echo "\" # 这会出现第 2 个命令提示符,说白了就是提示你命令不全,你再补个"就好了.如果是在脚本里,就会给出一个错误.

			
				2.	但是在某些字符处理相关的命令如echo中(加-e选项，或用$)，\反而会将字符转成 字符串处理的特殊字符：
						如：
							echo -e "x\ty"将输出x		y,也就是\t成了tab键
							echo $'\t'	也将输出tab键

						\n					意味着新的一行
						\r					回车
						\t					tab 键
						\v					vertical tab(垂直 tab),查前边的 Ctl-K
						\b					backspace,查前边的 Ctl-H
						\a					"alert"(如 beep 或 flash)
						\0xx				转换成 8 进制 ASCII 解码,等价于 oxx

				3.	转义符也提供续行功能.如果在行尾加上\,那么下一行就是这一行的延续


第六章	退出(exit)及其状态

		exit 命令被用来结束脚本,就像 C 语言一样.他也会返回一个值来传给父进程.成功返回 0，非0为错误码(0~255)。
		当一个脚本以 不带参数exit 或 exit $? 来结束时,脚本的退出状态就由脚本中最后执行命令来决定.可用于测试脚本中的命令的结果。	
		脚本中的函数和脚本本身都会返回退出状态

		特定的退出码都有预定的含义(见附录 D),用户不应该在自己的脚本中指定它.


第七章 Tests

		一、 命令测试与if/then结构：***	if命令将返回 if 后边的命令的退出码，所以为0或表达式有值时为true，大于0或表达式为空值时为false;
				1.	[：与test命令等价，用于比较表达式或文件测试

				2.	在版本 2.02 的 Bash 中,推出了一个新的[[...]]扩展 test 命令，并且"[["是一个关键字,不是命令
							使用[[]],而不是[],能够阻止脚本中的许多逻辑错误.比如,&&,||,<>操作能够工作在一个[[]]test 之中，但在[]中将给出一个错误。
							
							if [[ “$a" > “$b" ]]
							if [ “$a" \> “$b" ]
							注意:在[]结构中">"需要被转义.

				3.	((...))和 let...结果也能返回一个退出码,当算术表达式的结果为非 0 的时候, 他们的退出码将返回 0. 结果为0时，退出码为1。 （与[]相反）

							(( 0 ))
							echo “Exit status of \"(( 0 ))\" is $?."		#1
							(( 1 ))
							echo “Exit status of \"(( 1 ))\" is $?."		#0
							(( 1 / 0 )) 2>/dev/null
							echo "Exit status of \"(( 1 / 0 ))\" is $?."

				4.	if 命令可以测试任何命令,不仅仅是括号中的条件（看被测试命令是否返回0还是错误码）
						1）非常有用的"if-grep" 结构:（grep用于查找文件中符合条件的字符串，若不指定任何文件名，或文件名为“-"，则grep指令会从stdin读取数据。）
								if grep -q Bash file							# “-q"选项是用来阻止输出
								then echo “File contains at least one occurrence of Bash."
								fi

								word=Linux
								letter_sequence=inu
								if echo “$word" | grep -q “$letter_sequence"
								then
									echo “$letter_sequence found in $word"
								else
									echo “$letter_sequence not found in $word"
								fi

						2）在 if 后边,test 命令和[]或[[]]都不是必须的.

						3）同样，在一个逻辑表达式中，[]和test也可单独使用，无需if，就可形成一个测试语句。
							因为 && 会先测试前面的表达式，成功后才会测试下一个；而||会先测试第一个表达式，失败后才会测试下一个
							linkchk () {
								for element in $1/*; do
									[ -h “$element" -a ! -e “$element" ] && echo \"$element\"			# Of course, '-h' tests for symbolic link, '-d' for directory.
									[ -d “$element" ] && linkchk $element
								done
							}


			二、文件测试操作
					
					1. 文件测试选项：
							e						文件存在
							f						file 是一个 regular 文件(不是目录或者设备文件)
							s						文件长度不为 0
							d						文件是个目录
							b						文件是个块设备(软盘,cdrom 等等)
							c						文件是个字符设备(键盘,modem,声卡等等)
							p						文件是个管道
							h						文件是个符号链接
							L						文件是个符号链接
							S						文件是个 socket
							t						关联到一个终端设备的文件描述符
													这个选项一般都用来检测是否在一个给定脚本中的 stdin[-t0]或[-t1]是一个终端
							r						文件具有读权限(对于用户运行这个 test)
							w						文件具有写权限(对于用户运行这个 test)
							x						文件具有执行权限(对于用户运行这个 test)
							g						set-group-id(sgid)标志到文件或目录上
							u						set-user-id(suid)标志到文件上
							O						你是文件的所有者.
							G						文件的 group-id 和你的相同.
							N						从文件最后被阅读到现在,是否被修改.

	
							for directory in $directorys; do
								if [ -d $directory ]
									then linkchk $directory
								else
									echo “$directory is not a directory"
									echo “Usage: $0 dir1 dir2 ..."
							done

			三、其他比较测试操作
					1.	二元比较操作符,比较变量或者比较数字.（注意数字与字符串的区别）
						1）整数比较

								eq						等于,如:if [ “$a" -eq “$b" ]
								ne						不等于,如:if [ “$a" -ne “$b" ]
								gt						大于,如:if [ “$a" -gt “$b" ]
								ge						大于等于,如:if [ “$a" -ge “$b" ]
								lt						小于,如:if [ “$a" -lt “$b" ]
								le						小于等于,如:if [ “$a" -le “$b" ]
								<							小于(需要双括号),如:((“$a" < “$b"))
								<=						小于等于(需要双括号),如:((“$a" <= “$b"))
								>							大于(需要双括号),如:((“$a" > “$b"))
								>=						大于等于(需要双括号),如:((“$a" >= “$b"))


						2）字符串比较 		（！！！！！！！！！！  使用(“$string1")是一种很好的习惯  ！！！！！！！！）

								=							等于,如:if [ “$a" = “$b" ]
								==						等于,如:if [ “$a" == “$b" ],与=等价
															注意:==的功能在[[]]和[]中的行为是不同的,如下:
															[[ $a == z* ]]				# 如果$a 以"z"开头(模式匹配)那么将为 true
															[[ $a == “z*" ]] 			# 如果$a 等于 z*(字符匹配),那么结果为 true
															[ $a == z* ]					# File globbing 和 word splitting 将会发生
															[ “$a" == “z*" ] 			# 如果$a 等于 z*(字符匹配),那么结果为 true
															一点解释,关于 File globbing 是一种关于文件的速记法,比如"*.c"就是,再如~也是.
															但是 file globbing 并不是严格的正则表达式,虽然绝大多数情况下结构比较像.

								!=						不等于,如:if [ “$a" != “$b" ]
															这个操作符将在[[]]结构中使用模式匹配.

								<							小于,在 ASCII 字母顺序下.如:
															if [[ “$a" < “$b" ]]
															if [ “$a" \< “$b" ]
															注意:在[]结构中"<"需要被转义.
								>							大于,在 ASCII 字母顺序下.如:
															if [[ “$a" > “$b" ]]
															if [ “$a" \> “$b" ]
															注意:在[]结构中">"需要被转义.

								z							字符串为"null".就是长度为 0.
								n							字符串不为"null"
															注意:
															使用-n 在[]结构中测试必须要用""把变量引起来.使用一个未被""的字符串来使用! -z
															或者就是未用""引用的字符串本身,放到[]结构中(见 Example 7-6)虽然一般情况下可
															以工作,但这是不安全的.习惯于使用""来测试字符串是一种好习惯.


						3）混合比较：

								a								逻辑与
											exp1 -a exp2
											如果 exp1 和 exp2 都为 true 的话,这个表达式将返回 true
								o								逻辑或
											如果 exp1 和 exp2 中有一个为 true 的话,那么这个表达式就返回 true
											exp1 -o exp2

								在 [[]] 中使用比较操作符&&和||
										[[ condition1 && condition2 ]]
								在 []和test命令 中使用 o 和-a 
										if [ “$exp1" -a “$exp2" ]


			四、嵌套 if/then语句：与c语言相同，相当于两个if条件用 && 连接


第八章 操作符相关

			一、操作符
					1. = 操作符：赋值
					2. 算术操作符：+ - * / **(幂运算) % += -= *= /= %= 

							注意：在 Bash 中的整型变量事实上是 32 位的,范围是 -2147483648 到 2147483647.  Bash并不理解浮点数

					3. 位运算符： 一般只在处理sockets读出的变量时才会用到，极少用

					4. 逻辑操作： && ||    -------> 它们都不能出现在[..]中

					5. 混合操作： 
						1），
								逗号操作符可以连接 2 个或多个算术运算.所有的操作都会被执行,但是只有最后一个操作作为结果.
								let “t1 = ((5 + 3, 7 - 1, 15 - 4))”
								echo “t1 = $t1”														# t1 = 11
								let “t2=((a=9, 15 / 3))” 									# Set “a” and calculate “t2”.
								echo “t2 = $t2	a = $a”										# t2 = 5	a=9
								“,”主要用在 for 循环中,具体见 Example 10-12.


			二、数字常量
					shell 脚本默认都是将数字作为 10 进制数处理,除非这个数字某种特殊的标记法或前缀开头.以 0 开头就是 8 进制.以 0x 开头就是 16 进制数.
					1. 使用 BASE#NUMBER 这种形式可以表示其它进制表示法(BASE between 2 and 64,2到64进制都可以)
								eg：
									let “bin = 2#111100111001101”
									echo “binary number = $bin”				# 31181

									let “b32 = 32#77”
									echo “base-32 number = $b32”			# 231



第九章 变量高级篇

			一、shell内建变量

					1. $BASH：			这个变量将指向 Bash 的二进制执行文件的位置.
								bash$ echo $BASH
								/bin/bash

					2. $BASH_ENV：		这个环境变量将指向一个 Bash 启动文件,这个启动文件将在启动一个脚本时被读取. （就是在启动一个脚本时将相关的环境变量load进来）

					3. $BASH_VERSINFO[n]：记录 Bash 安装信息的一个 6 元素的数组.与下边的$BASH_VERSION 很像,但这个更加详细.
											# BASH_VERSINFO[0] = 3														# 主版本号
											# BASH_VERSINFO[1] = 00														# 次版本号
											# BASH_VERSINFO[2] = 14														# Patch 次数.
											# BASH_VERSINFO[3] = 1														# Build version.
											# BASH_VERSINFO[4] = release											# Release status.
											# BASH_VERSINFO[5] = i386-redhat-linux-gnu				# Architecture

					4. $BASH_VERSION： 安装在系统上的 Bash 的版本号.
											bash$ echo $BASH_VERSION
											3.00.14(1)-release

					5. $EDITOR:	脚本调用的默认编辑器,一般是 vi 或者是 emacs.

					6. $IFS:	内部域分隔符.
								这个变量用来决定 Bash 在解释字符串时如何识别域,或者单词边界.
								$IFS 默认为空白(空格,tab,和新行),但可以修改,比如在分析逗号分隔的数据文件时.
								注意:$IFS 并不像它处理其它字符一样处理空白.

					7. $IGNOREEOF
									忽略 EOF: 告诉 shell 在 log out 之前要忽略多少文件结束符(control-D).
					8. $LC_COLLATE
									常在.bashrc 或/etc/profile 中设置,这个变量用来在文件名扩展和模式匹配校对顺序.
									如果$LC_COLLATE 被错误的设置,那么将会在 filename globbing 中引起错误的结果.
									注意:在 2.05 以后的 Bash 版本中,filename globbing 将不在对[]中的字符区分大小写.
									比如:ls [A-M]* 将即匹配 File1.txt 也会匹配 file1.txt.为了恢复[]的习惯用法,
									设置$LC_COLLATE 的值为 c,使用 export LC_COLLATE=c 在/etc/profile 或者是~/.bashrc 中.
					9. $LC_CTYPE
									这个内部变量用来控制 globbing 和模式匹配的字符串解释.
					10. $LINENO
									这个变量记录它所在的 shell 脚本中它所在行的行号.这个变量一般用于调试目的.

					11.	$MACHTYPE
								系统类型，提示系统硬件
								bash$ echo $MACHTYPE
								i686

					12.	$OLDPWD
								老的工作目录(“OLD-print-working-directory”,你所在的之前的目录)

					13. $OSTYPE
								操作系统类型.
								bash$ echo $OSTYPE
								linux

					14. $PATH
								指向 Bash 外部命令所在的位置,一般为/usr/bin,/usr/X11R6/bin,/usr/local/bin 等.
								当给出一个命令时,Bash 将自动对$PATH 中的目录做一张 hash 表.$PATH 中以”:”分隔的
								目录列表将被存储在环境变量中.一般的,系统存储的$PATH 定义在/ect/processed 或
								~/.bashrc 中(见 Appendix G).

					15.	$PIPESTATUS
								数组的每个成员都会保存一个管道命令的退出码,$PIPESTATUS[0]保存第
								一个管道命令的退出码,$PIPESTATUS[1]保存第 2 个,以此类推.

					$PPID
								一个进程的$PPID 就是它的父进程的进程 id(pid).[1]

					$PROMPT_COMMAND
								这个变量保存一个在主提示符($PS1)显示之前需要执行的命令.

					$PS1
								主提示符,具体见命令行上的显示.
					$PS2
								第 2 提示符,当你需要额外的输入的时候将会显示,默认为”>”.
					$PS3
								第 3 提示符,在一个 select 循环中显示(见 Example 10-29).
					$PS4
								第 4 提示符,当使用-x 选项调用脚本时,这个提示符将出现在每行的输出前边.默认为”+”.

					$REPLY
								当且仅当在没有变量提供给”read”命令时,REPLY 才保存最后一个”read”命令读入的值.
								read
								echo “Your favorite vegetable is $REPLY.”

					$SHELLOPTS
								这个变量里保存 shell 允许的选项,这个变量是只读的.
								bash$ echo $SHELLOPTS
								braceexpand:hashall:histexpand:monitor:history:interactive-comments:emacs
					$SHLVL
								Shell 层次,就是 shell 层叠的层次,如果是命令行那$SHLVL 就是 1,如果命令行执行的脚
								本中,$SHLVL 就是 2,以此类推.

					$TMOUT
								如果$TMOUT 环境变量被设置为一个非零的时间值,那么在过了这个指定的时间之后,
								shell 提示符将会超时,这会引起一个 logout.

								另一种设置超时读取的方法：
										TIMELIMIT=4			# 4 seconds
										read -t $TIMELIMIT variable <&1

					$UID
								用户 ID 号.
								当前用户的 id 号,在/etc/passwd 中记录.这个值不会因为用户使用了 su 命令而改变.$UID 是只读变量,不容易在命令行或者是脚本中被修改,并且和内建的 id 命令很相像.

					$#
								命令行或者是位置参数的个数.(见 Example 33-2)
					$*
								所有的位置参数,被作为一个单词.
							注意:”$*”必须被””引用.
					$@
								与$*同义,但是每个参数都是一个独立的””引用字串,这就意味着参数被完整地传递,
								并没有被解释和扩展.这也意味着,每个参数列表中的每个参数都被当成一个独立的单词.
							注意:”$@”必须被引用.

								**********************************************************************************
											注意:$*和$@的参数有时会不一致,发生令人迷惑的行为,这依赖于$IFS 的设置.（详情参考原书）
								**********************************************************************************

					$-
								传递给脚本的 falg(使用 set 命令).参考 Example 11-15.
								注意:这起初是 ksh 的特征,后来被引进到 Bash 中,但不幸的是,在 Bash 中它看上去也不
								能可靠的工作.使用它的一个可能的方法就是让这个脚本进行自我测试(查看是否是交互的).

					$!
								在后台运行的最后的工作的 PID(进程 ID).

					$_
								保存之前执行的命令的最后一个参数.

					$?
								命令,函数或者脚本本身的退出状态(见 Example 23-7)

					$$
								脚本自身的 PID.这个变量经常用来构造一个”unique”的临时文件名.
								(参考 Example A-13,Example 29-6,Example 12-28 和 Example 11-25).
								这通常比调用 mktemp 来得简单.


			二、	操作字符串

					Bash的字符串操作非常多，但是却很混乱。有些是参数替换的子集，有些却又属于UNIX的expr命令。导致语法的不一致 和 功能重叠






			三、参数替换

					1. 一般情况下，${parameter}与$parameter 相同,就是 parameter 的值. 
						 也可以组合起来一起赋指给字符串变量.
							  如：your_id=${USER}-on-${HOSTNAME}

					2. 默认值设置格式：		${parameter-default},${parameter:-default} 
						 如果 parameter 没被 set,那么就使用 default. 两者基本相同，额外的”:”在 parameter 被声明了被赋空值时,会有一些不同.

						 **************************************************************************************************************
										variable=				----------> 这句表示变量已声明，并且已经set，set的值为null. 可以unset variable
						 **************************************************************************************************************

								如：echo ${username-‘whoami‘}   # 如果username没有被set,它的值就是 'whoami'












































