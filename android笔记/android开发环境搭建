在Windows下设立Android开发环境
 
1，安装开发环境Eclipse；
2，安装Java SDK和JRE；
3，安装ADK（包括开发包和运行环境） 
其中要先安装ADT到Eclipse中，再通过ADT的AVD Manager调用ADK中的Setup；
4，设置环境变量
API文档：http://androidappdocs.appspot.com/index.html 
 
a folder failed to be renamed or moved on SDK install的处理方法

在进行android-sdk-windows中进行 update all时， 报错  folder failed to be renamed or moved...,goole了一下，有外国网友解决办法如下:
1, 复制 tools目录 为一个新的目录 tools-copy ,此时在android-sdk-windows 目录下有两个目录 tools 和 tools-copy
2, 在tools-copy目录运行 android.bat ，这样就可以正常 update all 了
3，之后，关闭 sdk,
4, 在 android-sdk-windows 目录运行 SDK Setup.exe， 就可以了
 
 
 
Android文档：
1，Intruduction to Android;
2，Andbook;
3，Essential Android;
 
第一步：下载四件套：eclipse，JDK，ADK，ADT。
1）eclipse
http://www.eclipse.org/downloads/
2）JDK
http://java.sun.com/javase/downloads/index.jsp
3）ADK（下载后用SDK Setup重新fetch）
http://developer.android.com/index.html
4）ADT（用eclipse install）
https://dl-ssl.google.com/android/eclipse/
 
第二步：安装eclipse，JDK，SDK，ADT
 
第三步：配置环境变量：
1）增加JAVA_HOME,,ANDROID_HOME环境变量。
2）在PATH中加入%JAVA_HOME%/bin;%ANDROID_HOME%\tools;
3）增加变量classpath为.;%JAVA_HOME%/lib/rt.jar;%JAVA_HOME%/lib/tools.jar
 
 
第四步：指定ADK 路径。即build target
 
第五步：创建AVD。
 
在Linux下设立Android开发环境

1.进入ubuntu系统，安装必要软件：
1）iBus，MSN，wine，sourceinsight，
2）JDK&JRE，Eclipse，ADK，NDK
3）git

2.配置Eclipse,搭建开发和调试环境
1)在模拟器上安装apk，export PATH=./ + Eclipse START AVD + emulate @2.2 + adb install **.apk
2)adb shell进入设备（模拟器）shell环境

 


以下为decarta搭建android开发环境的wiki
 
Getting Started with Android and the Crystax NDK
From DeCarta Engineering Wiki
Getting Started with Android and the Crystax NDK
Jump to: navigation, search

This guide is a step by step introduction to Android development using Eclipse IDE, Android SDK, and the Android Native Development Kit (NDK). What is NDK? Android is a Java platform built on top of a Linux kernel; most applications are written in Java, however developers may also need to write C/C++ applications for portability or in some cases performance sake, so NDK developed to enable these developers. The factory NDK does not support some important features however, most notably support of C++ exceptions, RTTI and Standard C++ Library, which can make a port more effort than a reimplementation in some cases. Enter Crystax NDK which adds support for these features.


1. This tutorial is written for Ubuntu Linux users. It will be mostly the same for other OS's, such as OSX and Windows, but for a few hopefully minor exceptions. For Windows, it would probably help to get the development tools mentioned in the following step's link.

2. Get the modified NDK, android-ndk-r4-crystax from http://www.crystax.net/android/ndk-r4.php#download and unpack somewhere comfortable. At the time of this writing, this will be android-ndk-r4-linux-x86-crystax-3.tar.bz2. I put mine directly in my home directory.

3. There is no need to build the NDK from sources, just grab a pre-built distribution from the above link.

4. Get the Android SDK, http://developer.android.com/sdk/index.html and unpack somewhere comfortable, next to the NDK would be fine. Wherever you put it, add the tools directory to your executable path, I edit /etc/bash.bashrc to include the following at the bottom of the file; modify for your environment of course.

export ANDROID_SDK=/home/rmgold/android-sdk-linux_86

export NDK_ROOT=/home/rmgold/android-ndk-r4-crystax

export PATH=$ANDROID_SDK/tools:$PATH

5. Get the latest Eclipse. 3.6. Pick the CDT version (C developers toolkit, http://www.eclipse.org/downloads/packages/eclipse-ide-cc-developers/heliossr1), we'll add Java and Android support post install. At the time of this writing, that would be version Helios (http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/helios/R/eclipse-cpp-helios-linux-gtk.tar.gz for linux) If you get the 64 bit version for your 64 bit host, make sure you get 64 bit JDK in step 7. Conversely, get 32 bit Eclipse for 32 bit JDK, but can be either 32 or 64 bit host. Note, you could just use Ubuntu package manager and get the official Ubuntu Eclipse and it will get the right JDK, but that is currently from the Eclipse 3.5 branch and you're on your own, should work fine though.

6. Unpack and install Eclipse, I put mine in my home directory, along with the workspace created in the first run. If you installed from Ubuntu packages manager, or synaptic, you'll have a nice menu item under Programming. If not, you can also make your own menu item like I do and use that as a desktop shortcut, by right clicking on the Applications menu and edit, etc. If you downloaded Eclipse as per instructions, you'll need to first follow the next step before starting up.

7. Get JDK. Go to the Applications menu on the desktop, Ubuntu Software Center, type in JDK, select OpenJDK openjdk-6-jdk is fine. Otherwise get a recent one from java.sun.com or: http://www.oracle.com/technetwork/java/javase/downloads/index.html

8. Once step 7 is complete, start up Eclipse and select the default workspace to create first time through. Close the welcome screen.

9. In Eclipse, go to Help->Install new software, click the Add button, enter http://dl-ssl.google.com/android/eclipse/ in the Location field.

10. Should now see Developer Tools in the list, select the tools, then Next > Next > I accept the terms of the license agreements, Finish to download and install the ADT, also agreeing at some point to install unsigned software, then restart Eclipse.

11. ADT is now installed, time to download the virtual machine images for the emulator. Go to Window->Android SDK and AVD Manager. Aha, just kidding, as you can see you need to tell ADT where the bootstrap Android SDK is first, so go to Window->Preferences->Android and fill in the SDK location from step 4, Apply then OK.

12. Now go to Window->Android SDK and AVD Manager, select Available Packages, and select all versions available. Install selected->Accept all licenses->Install. Get a coffee at the furthest Starbucks in your zipcode, and finish it. This will take some time.

13. Test out the installation. We'll start with a simple template app that uses NDK for OpenGL and includes a couple of native libraries (libzip and libpng) which will be a good starting point for any game application. Actually it solves a NDK shortcoming in that there is no built in support for natively getting at the Assets within your project, and at the same time the Java Asset manager is limited to 256 files per archive directory and a limited number of bytes per file, so this should help a lot. Get the project moob-NDK aka android-ndk-assets from http://www.anddev.org/resources/source/1912 , make a directory in the NDK_ROOT called “apps” and unpack the zip in this directory.

14. Load moob project in Eclipse. File->Import->General->Existing Projects into Workspace->Next > then select root directory where you unpacked the zip, and Finish. Don't select Copy projects into workspace.

15. Edit settings from the project to tell it where the NDK_ROOT is. You set this as a variable in step 4, need to be sure it is part of the environment and a few other settings. Right click the Moob-NDK project, Properties->C/C++ General->Paths and Symbols->GNU C++ (Includes) and fix up the Include directories to match your NDK location. Click the path /home/silver/etc... and Edit, click File system... and dig to your NDK_ROOT/build/platforms/android-4/arch-arm/usr/include hit OK. Apply. OK.

16. Now set JDK to level 5, you downloaded 6 but it has compatibility, so go to Moob-NDK->Properties->Java Compiler check Enable project specific settings and set the Compiler compliance level to 1.5 from 1.6, Apply, Yes, OK.

17. Finally, need to enable the NDK_ROOT definition in the Builders environment. It should pick up NDK_ROOT you set in step 4, but doesn't, so select Moob-NDK right click properties, C/C++ Build->Environment and Add... NDK_ROOT set that to where you set it in step 4. Apply, OK. Now finally, where it is really looking for NDK_ROOT, properties->Builders->NDK Builder, select and Edit..., then goto Environment tab, add NDK_ROOT variable and set as before. Then clean, refresh Moob-NDK. Now it should build OK. If it doesn't, go back to the properties->Builders->NDK Builder, and fill in the actual absolute path of the working directory rather than use the variable NDK_ROOT and that avoids that. I didn't have a problem the first time through, but in writing this tutorial I guess I skipped a step and filling out the full path works fine. The moob project is a little out of date so this is getting it back in shape.

18. Finally finally in the same Edit configuration panel for NDK Builder, in the Arguments box, it says APP=moob, change this to APP=android-ndk-assets or whatever directory under NDK_ROOT/apps that you extracted the moob zip too. Alternatively, change the name of that directory to moob on the filesystem and fix everything else to match. Apply, OK.

19. Run in emulator. Select Moob-NDK, click the green Run button, select Android Application as a way to run Moob-NDK in the popup given. OK. No compatible targets have yet been defined, don't panic, select yes to add a new one. This brings up the AVD manager.

20. New... AVD (Android Virtual Device), make a name, mine is called avd1.6 as you can select the least common API level 1.6 update 1 aka API 4. Set a size for your virtual SD, doesn't have to be very big, say 80MB, and just use the default screen dimensions, then Create AVD. 1.6 should be the least level API that needs support.

21. Select the new avd1.6 or whatever you named it, then Start...>Launch and wait for the AVD to boot. It may take a minute, but the good news is you can leave it up and not have to restart one every time you want to test an app or something, as far as Eclipse is concerned it is a real device, and in fact, if you attach a USB connected phone it is managed the exact same way, which is nice.

22. Go ahead and close/kill the AVD manager, now the Android Device Chooser comes up, if you had your phone connected you could choose that, but for now lets choose the emulator-5554|avd1.6 we just booted. Select it, and OK to launch Moob-NDK.

23. Let's check out the device details in DDMS. In Eclipse, in the upper right hand corner, you'll see the C/C++ (or Java) perspective button, and just to the left side of that, there's a little windowey icon, click that, select Other (the first time through, otherwise you already will see DDMS) select DDMS. This brings up the device perspective, along with your device's process list (ie from unix ps command), you can inspect threads, heap, telephony, and otherwise interact with the device, pull or push files in the file explorer, and see the all-knowing logcat console. Neat!

24. OK now it runs in emulator, let's run on a phone. Since you compiled vs. the API level 4, just about any device on the market today will be compatible. Android 1.6 should be NDK stable for any 1.6+ or 2.x Android. Get the phone, go to settings->Applications->Development and enable USB Debugging, and Stay Awake if you have that.

25. If you have a Nexus 1, something with the USB driver settings makes it require you to run the adb server as root, but other devices such as the Moto Droid were OK with your regular user. You'll need to restart adb server so that Eclipse automatically sees the phone. Adb is your communications framework between host PC and device, allows you to get a shell for example. It is in your SDK, so be sure if you need to switch to root that root has SDK/tools in the path.

26. Bring up DDMS if you want, it will help show what is going on, but in particular you won't be able to reset adb for the N1 device from DDMS unless you run Eclipse as root, which is not recommended. So bring up a terminal shell, become root ( via sudo su ), and

#killall adb; adb shell

This will kill the adb server, and log you in to the phone which first restarts adb server.

27. On Nexus 1 I just noticed you may also reboot the phone instead of killall adb; adb shell

28. In DDMS you can now see your phone, looks much like the emulated device. If you still had Moob-NDK selected as your current project, from DDMS you can launch the app from the green start button, or debug button if you want, or go back to either the C++ or Java perspectives and launch from there. If this were an ordinary all Java Android app of course you would only be able to launch from Java or DDMS perspectives.

29. Ta-dah.

