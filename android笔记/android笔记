第一章  Android系统架构：

一个应用，一个虚拟机实例，一个进程！！！

每一个Android应用都运行在一个Dalvik虚拟机实例里，而每一个虚拟机实例都是一个独立的进程空间。每个进程之间可以通信（IPC，Binder机制实现）。虚拟机的线程机制，内存分配和管理，Mutex等等都是依赖底层操作系统而实现的。

不同的应用在不同的进程空间里运行，当一个虚拟机关闭或意外中止时不会对其它 虚拟机造成影响，可以最大程度的保护应用的安全和独立运行。

 Zygote是虚拟机实例的孵化器。AndroidRuntime.cpp中ZygoteInit.main()的执行会完成一个分裂，分裂出来的子进程继续初始化Java层的架构，这个分裂出来的进程就是system_server。每当系统要求执行一个Android应用程序，Zygote就会FORK出一个子进程来执行该应用程序。这样做的好处显而易见：Zygote进程是在系统启动时产生的，它会完成虚拟机的初始化，库的加载，预置类库的加载和初始化等等操作，而在系统需要一个新的虚拟机实例时，Zygote通过复制自身，最快速的提供个系统。另外，对于一些只读的系统库，所有虚拟机实例都和Zygote共享一块内存区域，大大节省了内存开销。



第二章	Android系统启动过程
	一、Linux kernel启动，一直到init进程启动。Init进程启动完成之后，还负责启动其他的一些重要守护进程，包括：
        Usbd进程（USB Daemon）：USB连接后台进程，负责管理USB连接。
        adbd 进程（Android Debug Bridge Daemon）：ADB连接后台进程，负责管理ADB连接。
        debuggerd 进程(Debugger Daemon) ：调试器后台进程，负责管理调试请求及调试过程。
        rild进程 (Radio Interface Layer Daemon)： 无线接口层后台进程，负责管理无线通信服务。
        
  二、ServiceManager启动
  		Init进程启动ServiceManager.cpp作为system service的管理器。（相当于Powerparts的PLPMEServer中用于记录连接到它的所有进程的信息表对象）

	三、主App进程zygote启动
			Init进程启动Zygote进程作为所有App进程的父进程。(相当于Powerparts的PLPMEClient)
			1. 首先创建AppRuntime，即AndroidRuntime，建立了一个Dalvik虚拟机。通过这个runtime传递com.android.internal.os.ZygoteInit参数
					runtime.start("com.android.internal.os.ZygoteInit",startSystemServer);
					
			2. 此时Zygote的Dalvik开始启动。它将完成以下工作：
				1)运行ZygoteInit.java的main()。加载资源与系统共享库，并开启Socket监听服务。
				2)当收到创建Dalvik VM实例请求时，会使用COW（copy on write）方式fork一个新的Dalvik VM实例。

	四、启动系统服务进程
			1. Zygote fork启动Surface Flinger和Audio Flinger两个c++编写的native服务，注册到ServiceManager
			2. Zygote fork启动Android的SystemService，包括硬件服务和系统框架核心平台服务，注册到ServiceManager。
					列举system service：
							ActivityManagerService					EntropyService										PowerManagerService
							TelephonyRegistry								PackageManagerService							AccountManagerService
							BatteryService									HardwareService										Watchdog
							SensorService										BluetoothService									StatusBarService
							ClipboardService								InputMethodManagerService					NetStatService
							ConnectivityService							AccessibilityManagerService				NotificationManagerService
							MountService										DeviceStorageMonitorService				LocationManagerService
							SearchManagerService						FallbackCheckinService						WallpaperManagerService
							AudioService										BackupManagerService							AppWidgetService
		
	五、启动Home Launcher
			1. 当SystemService加载了所有的系统服务后就意味着系统就准备好了，它会向所有服务发送一个系统准备完毕（systemready） 广播。
			2. ActivityManagerService 接收到systemready广播后，开始启动Launcher：向Zygoute进程请求一个新的Dalvik实例，然后ActivityManagerService在系统中查找具有<category android:name = "android.intent.category.HOME"/>属性的Activity，并启动它。ActivityManagerService就是用这样的方法启动Contact（联系人）应用程序。
			3. LauncherApplication是Launcher进程，而Launcher是LauncherApplication的Activity。
	
	
	
第三章	Android应用程序&进程间通信
	一、android.app.application定义了一个App，它维护App的全局状态数据。当在AndroidManifest.xml中配置application后，系统在launcher一个App时，就会实例化一个android.app.application.
		android.app.application一般直接以singleton方式使用，不用再派生，当然有需要的话派生也可以（如LauncherApplication、EmailApplication）。
		如果它需要用到context，则在application的构造函数中使用android.content.Context.getApplicationContext()获取。
		
	二、Binder
		1. 为什么要用Binder实现进程间通信：
		1） 从性能和稳定性考虑，
			Linux现成的4种IPC：管道&队列&socket需要两次数据copy操作，从发送放copy到kernel再copy到接收方；而共享内存虽然不需要copy，但管理太复杂。
			而Binder管理简单并且只需要copy 一次
			
		2） 从安全性考虑：
			跟PowerParts不同，Android的应用程序来自外部，如果使用传统的IPC机制，无法阻止恶意程序的恶意服务访问。因为传统IPC都是在上层协议中处理安全性问题。而Android Binder会为每一个应用生成一个UID来标识它，
			
		2. Binder的实现
			1）Binder是Android在Linux kernel新增的一种IPC机制，Binder驱动使用C语言开发，但对外提供面向对象的接口。
			2）Binder是存在于Server进程中的一个实体对象，而Binder对象的句柄却会作为一个proxy放置在Client进程中。Client通过这个bind proxy，用类似引用本地对象的方式，来引用Server端的Binder对象，访问其函数（如发送服务请求等）。
			3）Binder对象实体位于一个进程中（server），而它的proxy却可以位于多个Client进程中。Binder模糊了进程边界，淡化了进程间通信过程，整个系统仿佛运行于同一个面向对象的程序之中。形形色色的Binder对象以及星罗棋布的引用仿佛粘接各个应用程序的胶水，这也是Binder 在英文里的原意。
	
第四章	Android线程
	一、ActivityThread即通常所说的UI线程、main线程。
			1. 默认情况下，一个应用程序内的各个组件(如Activity、BroadcastReceiver、Service)都会在主线程中执行（因为只有一个应用Thread，所以只有一个loop、一个handler、一个msgqueue）。为了提高UI的响应速度，一般会启动新的HandlerThread来处理UI以外的事件。如果主线程超过5秒没有反应，将被系统kill。
			2. 所有的View必须在主线程中执行onDraw()。如果需要长时间绘制，则需要使用SurfaceView来代替View，它将使用background Thread执行绘制过程
			
			





第五章	Android对象
	一、Andriod对象间通信
			两种Intent：
			从原理的角度来说，本质上都是通过Binder把信息传递给ActivityManagerService进程，再由ActivityManagerService转发
			1. startActivity & startService中的Intent
				1)startActivity(intent);运行过程中也可以用，只是需要在AndroidManifest.xml中将activity的launchMode设置singleInstance
				2)startService(intent)
			2. broadcastor Intent：
				通用的Intent收发接口，可以用于各种对象间的消息收发：
				1）消息发送接口：
						context.sendBroadcast	用于发送并行广播
						context.sendStickyBroadcast	用于发送粘性广播
						context.sendOrderedBroadcast	用于发送串行广播
				
				2)消息接收接口：BroadcastReceiver
				当需要一个Activity或一个Service作为接收器时，可在Activity/Service中new一个BroadcastReceiver,实现onReceive()接口，然后在onCreate()中registerReceiver()。这样在Activity/Service中就可以接收intent了.


			3.	接收过程的实现：ActivityManagerService根据intent的参数在注册链表中找合适的Receiver，找到后，发送给对应的主线程ActivityThread。
					在主线程的handlerMessage()中，找到对应的compont进行处理：
					receiver = (BroadcastReceiver)cl.loadClass(component).newInstance();
					receiver.onReceive(context.getReceiverRestrictedContext(), data.intent);
	
			4.	AIDL
					类似于对象间的远程过程调用。常用于Service对外提供服务接口。
			


	Service
	
	Service的两种启动方式：
		1)startService():将调用service的onCreate()，但会根据client提供的参数决定是否调用onStartCommand()。
			多次startService()只会多次调用onStartCommand()。
		2)bindService()：同样只会调用onCreate()，但不会调用onStartCommand()。
			client执行bindService后，将可以从service的onBind()接口获取到IBinder对象。这样client就可以通过IBinder来调用service暴露出来的接口。
			只要client到service的连接还在，则service将会持续运行，不管client是否还保留IBinder引用。
			通常情况下，返回的IBinder都是一个用AIDL定义的复杂接口。
	
	Service运行的方式：
		一个service只要显式start或被若干client bind，则它会一直运行下去。如果不是这两种状态，则onDestory()被调用。
		
		
	Service结束的方式：
		1) Context.stopService() 
		2) stopSelf() : 软停止，即会处理完当前intent，再结束service

	Service的访问方式：
		1)只要service在AndroidManifest.xml中声明了，就会被系统强制对外提供服务。而如果外部的App需要访问此Service时，还需要在自己的AndroidManifest.xml中增加permission.
		2)Service还可以通过先执行checkCallingPermission来阻止某些来自外部进程的调用。
		
	Service的优先级：
		当系统内存不足需要回收时，service所在的进程的优先级如下：
		1）在执行onCreate(),onStartCommand(),onDestroy()时，跟foreground进程优先级相同；
		2）service在运行阶段时，它的优先级低于visible进程，高于not visible进程。
				（因为一般只有很少的进程是处于visible状态，所以service所在进程一般都不会被kill）
		3）如果有client进程连接到service，那service的优先级与最高的那个client相同。
		4）一个已经启动的service可以用startForeground()来将自己置为visible优先级。


	Service的重启问题：
		当Service因系统内存不足被kill后，会在某个时期被重新启动。这样会有个很重要的问题：如果在onStartCommand()中启用了异步操作或多线程，则需要START_FLAG_REDELIVERY方式来通知系统在重启时重新发送一个intent，以继续执行之前未完成的动作。






Activity显示大图片的节省内存方式：
											BitmapFactory.Options opt = new BitmapFactory.Options();
		1. 最省内存方式：		opt.inPreferredConfig = Bitmap.Config.RGB_565;
											opt.inPurgeable = true;//设为true表示当系统要内存的时候，可以回收它
		2. 共享方式存储图片：	opt.inInputShareable=true;可以让bitmap共享他人的数据


		3. 尽量不要使用setImageBitmap或setImageResource或BitmapFactory.decodeResource来设置一张大图，
		因为这些函数在完成decode后，最终都是通过java层的createBitmap来完成的，需要消耗更多内存。
		因此，改用先通过BitmapFactory.decodeStream方法，创建出一个bitmap，再将其设为ImageView的 source，
		decodeStream最大的秘密在于其直接调用JNI>>nativeDecodeAsset()来完成decode，
				另外，decodeStream直接拿的图片来读取字节码了， 不会根据机器的各种分辨率来自动适应，
		使用了decodeStream之后，需要在hdpi和mdpi，ldpi中配置相应的图片资源，
		否则在不同分辨率机器上都是同样大小（像素点数量），显示出来的大小就不对了。

		4. Bitmap对象在不使用时,我们应该先调用recycle()释放内存，然后才它设置为null.虽然recycle()从源码上看，调用它应该能立即释放Bitmap的主要内存，但是测试结果显示它并没能立即释放内存。但是我它应该还是能大大的加速Bitmap的主要内存的释放。
		
		5. 构造Adapter时，要使用缓存的 convertView
		
		
		
		
		
		
第七章	Android UI
	一、手机屏幕设备：
			VGA：（480×640)的分辨率；
			QVGA：Quarter VGA，即240×320；
			HVGA：Half VGA，即320*480；
			WVGA：Wide VGA，即480*800；（适合于上网，因为很多网页的宽度为800）
	二、基本概念
			根据google的推荐，像素统一使用dip，字体统一使用sp  
	 
			1. 像素 pixel
			2. 像素密度	dpi(dot per inch)
			3. 设备独立像素 dip(device independent pixels)
					dip是android抽象出来的概念。指一个抽象意义上的像素，程序用它来定义界面元素。如果用dip像素摆好了屏幕的控件，无论屏幕大小变换，控件的相对大小是不变的。这也就是google想的，“与设备无关”的意义了。
					density就是dpi。dip到pixel的映射关系有density决定：density :160 = px : dip
					1）当屏幕等比例缩放时，dip定义的控件也等比例缩放
					2）当屏幕非等比例缩放时，dip定义的控件按照高度的变化等比例缩放。
					apk的资源包中， 
						 当屏幕density=240时使用hdpi标签的资源 
						 当屏幕density=160时，使用mdpi标签的资源 
						 当屏幕density=120时，使用ldpi标签的资源。 
			4. sp: scaled pixels(放大像素). 主要用于字体显示best for textsize。

	三、	UI类
					1）ViewParents：定义了一个view的parents必须实现的接口
					2）ViewManager：定义了操作子view的接口（add或remove子view到Activity上）
					3）LayoutParams：被view用来告知它们的parents，它们希望怎么样布局。最基础的LayoutParams只有长宽两个参数。而Fill_parents为父view减padding
					4）ViewGroup：定义了一个可以拥有子view的view，它是其它Layouts的父类。
					
					4）Layout：用于管理Text在屏幕上的布局，可编辑文本用DynamicLayout，静态文本用StaticLayout
					5）

	四、	从Activity到View
			Activity有一个ViewManager的子类WindowManager用于管理所有的view&viewgroup
			Activity还有一个Window表示一个显示在WindowManager上面的top view，它有着一个UI window的标准配置：title，background，key process等。
			一个独立的ViewGroup要想在界面上显示，就必须用window.setContentView(view)将view 放置到作为top view的window中。




第八章	具体的一些UI控件
	一、Tab效果的实现：
		主要用到TabActivity、TabHost、TabWidget。其中开发者主要通过操作TabHost的接口来处理整个Tab界面。
		TabHost是FrameLayout的子类，用FrameLayout来处理内容的分页；并用TabWidget来显示labels。







第六章	Android系统的内存分配和查看

		因为Android系统和Linux系统一样，有很多的内存是以共享内存的形式使用，所以很难准确地统计每一个进程分别使用了多少内存。更不用说使用了多少物理内存。
		
		查看进程内存：
		1. 使用Debug查看：
			1）使用Debug的getNativeHeapSize ()，getNativeHeapAllocatedSize ()，getNativeHeapFreeSize ()方法。该方式只能得到Native堆的内存大概情况，数据单位为字节。
			2）使用Debug的getMemoryInfo(Debug.MemoryInfo memoryInfo)该方式得到的MemoryInfo所描述的内存使用情况
							static long getNativeHeapAllocatedSize() 
									返回的是当前进程navtive堆中已使用的内存大小
							static long getNativeHeapFreeSize()
									返回的是当前进程navtive堆中已经剩余的内存大小				
							static long getNativeHeapSize()
									返回的是当前进程navtive堆本身总的内存大小


		2. 使用ActivityManager查看：
			1）使用ActivityManager.getMemoryInfo()，返回的ActivityManager.MemoryInfo只有三个Field:
						availMem:表示系统剩余内存
						lowMemory：它是boolean值，表示系统是否处于低内存运行
						hreshold：它表示是否低内存运行的门阀值

			2）使用ActivityManager.getProcessMemoryInfo(int[] pids) 返回的Debug.MemoryInfo[]比较详细.数据的单位是KＢ.MemoryInfo的Field如下：
					dalvikPrivateDirty： The private dirty pages used by dalvik。
					dalvikPss ：The proportional set size for dalvik.
					dalvikSharedDirty ：The shared dirty pages used by dalvik.
					nativePrivateDirty ：The private dirty pages used by the native heap.
					nativePss ：The proportional set size for the native heap.
					nativeSharedDirty ：The shared dirty pages used by the native heap.
					otherPrivateDirty ：The private dirty pages used by everything else.
					otherPss ：The proportional set size for everything else.
					otherSharedDirty ：The shared dirty pages used by everything else.



					dalvik：是指dalvik所使用的内存。
					native：是被native堆使用的内存。应该指使用C\C++在堆上分配的内存。
					other:是指除dalvik和native使用的内存。但是具体是指什么呢？至少包括在C\C++分配的非堆内存，比如分配在栈上的内存。puzlle!
					private:是指私有的。非共享的。
					share:是指共享的内存。
					PSS：实际使用的物理内存（比例分配共享库占用的内存）
					Pss：它是把共享内存根据一定比例分摊到共享它的各个进程来计算每个进程使用内存。网上又说是比例分配共享库占用的内存，那么至于这里的共享是否只是库的共享，还是不清楚。
					PrivateDirty：它是指非共享的，dirty内存的大小。比如Linux为了提高分配内存速度而缓冲的小对象，即使你的进程结束，该内存也不会释放掉，它只是又重新回到缓冲中而已。
					SharedDirty:参照PrivateDirty我认为它应该是指共享的，又不能换页出去（can not be paged to disk ）的内存的大小。比如Linux为了提高分配内存速度而缓冲的小对象，即使所有共享它的进程结束，该内存也不会释放掉，它只是又重新回到缓冲中而已。












Android ANR问题处理：
一、ANR问题的原因：
		应用响应度是由Activity Manager和Window Manager系统服务监视的。当Android发现某主线程中有下面一个条件发生的时候，会对特定的应用显示ANR对话框。
    1）No response to an input event (e.g. key press, screen touch) within 5 seconds.
    2）A BroadcastReceiver hasn't finished executing within 10 seconds In Android, application responsiveness is monitored by the Activity .
    
    
    
二、如何解决ANR：
		1. 设计好任务在主线程与其它线程之间的分配，主线程除了显示什么都不做。最好不要在Activity&Broadcast中开子线程，应该在Service中开。
		2. 在程序运行时，出现了ANR，工程师应该通过/data/anr/traces.txt并结合代码，进行ANR的分析。
		3. 在项目中后期，你可以使用 StrictMode 来帮助你在主线程中查找潜在的耗时操作，比如对网络或数据库操作。
				StrictMode是一个提醒危险动作的工具，比如在主线程中操作DB、文件、网络I/O、动画等，应该将这些耗时操作移出主线程。虽然通常这些操作也很快，但有时在一些其它进程做I/O等的情况下，它们会表现得很慢，所以最好是假设它们本来就是慢的。不过并不是所有的问题都是问题，有些初始时的disk操作就可容忍，而网络I/O一般都不能容忍。
				1）StrictMode使用方法：（因为StrictMode的实现会改变，所以最好不要在App中保留这些代码）
					public void onCreate() {
						 if (DEVELOPER_MODE) {
								 StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder() //将StrictMode应用在一个Thread上
								         .detectDiskReads()		//设置监视的事件，这个是可配置的。
								         .detectDiskWrites()
								         .detectNetwork()   // or .detectAll() for all detectable problems
								         .penaltyLog()		//发现问题后的提示方式，打Log
								         .build());
								 StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()	//将StrictMode应用在整个VM进程上
								         .detectLeakedSqlLiteObjects()
								         .detectLeakedClosableObjects()
								         .penaltyLog()
								         .penaltyDeath()
								         .build());
						 }
						 super.onCreate();
				 }

				2）StrictMode发现问题后的解决方式：
					threads, Handler, AsyncTask, IntentService, etc
				
		4. 在项目后期，应该通过monkey等来进行压力测试，找出潜在的ANR，并进行修改。
		
		
Android应用测试
	关于monkey的使用请参考《Android的monkey用法》http://hubingforever.blog.163.com/blog/static/17104057920117343625575/









手机上的重要目录
/system/app/:基本上APK都放在这个目录。

/data/data/:每个应用程序的私有数据，都放在这个目录里。这个目录下，按照每个应用的包名存在很多目录。在每个包名下，存放的是与之对应的应用程序的私有数据，包括数据库、私有配置等等。







软件开发总体组成：
一、
第一层级分类：三层：app + OS + driver


二、app之间
第二层级分类：进程间通信（包括网络通信），线程间通信；

三、app之中：
第三次分类：	
		1）静态横向分块：JDK中的一些常用模块，常用工具等，比如说java.util、log工具、loader工具、session管理工具等
		** 一个app如何在启动时将需要的那些横向分块 按照app配置 一个个启动起来，这就需要一个配置文件，而配置文件一般是xml，所以Digester很重要。 ** 
		
		2）静/动态纵向分层：表示层（android界面与JSP等）、MVC（android adapter和Structs等）、逻辑层（android Activity等与Spring）、数据存储层（android provider和Hiebrate）、数据库层（SQLite与Mysql等）

			Android				J2ee


			各种view <---------------------> JSP  (另外其它android的各种不需要adapter的控件实际上只是一种紧耦合的mvc，数据只是在控件里面而已)

			adapter	<---------------------> Structs
			其它的逻辑 <--------------------> Spring
			Provider <--------------------> Hiebrate

			SQLite	<---------------------> MySQL,Oracle...
		3）运行时状态，即指整个进程空间里的布局，包括代码空间，数据空间，堆和栈，对象在内存中的状态等；还包括每个线程的执行路线，调用堆栈；还包括对象间通信，如observe、composite、chain of responsibility等模式设计的松耦合的对象间关系。也包括将上面静态的所有模块按照一定的规则load起来，挂载在整个运行系统之中（如Tomcat）。
			a）启动：
			b）运行：
			c）停止：
		


		

四、
从整个设备角度，或整个系统角度，或者整个app角度，都可以分为两个面：服务面和设置管理面；比如基站设备，比如Java里的Java.lang.System，比如Tomcat的server&service模块,catalina的start和stop
这两个面也分别对应着两份数据：服务数据和配置数据。比如在android中服务数据方sqlite，配置数据放在userpreference；它们可以由provider统一访问。


五、数据理解：
一个对象 = 数据库表中的一个元组 = 一个消息体 = 一个hashmap。因为它们都是由一组kvp组成。
** 实际上所有的数据都是有kvp的形式，只不过我们一般会忽视k，而把所有的v放在一起称之为数据。




三种父子关系：三种是完全相互独立的
1.类层次上的父子关系：是可以反应在内存的存储结构上的；
2.对象的包含关系的父子关系：父对象有一个指针指向子对象（当然子对象也可以有一个指针指向父对象）
3.界面显示的父子关系：完全只是看layout布局，它可以是第2点的关系（composit，PLView），也可以不是；
  后两种父子关系中的对象在内存中看起来是平等的关系








第一章 adapter
		++++++++++  adapter就相当于将数据与视图（MV）连接起来的中间者  	++++++++
		++++++++++  Struts就相当于将请求与数据、数据与视图两个方面的连接（MVC）	+++++++++++
	一、adapter有两种：

		1.SimpleAdapter：以List<Map<String,?>>形式封装数据
		2.SimpleCursorAdapter：以Cursor对象封装数据，Cursor中需要有“_id”一列

	二、ListView的getItemAtPosition(int)方法可以获取封装数据的容器

	     1.如果传入的是SimpleAdapter，获取到的就是一个Map<String,?>
	     2.如果传入的是SimpleCursorAdapter，获得到的就是一个Cursor，并且Cursor以指向选中的一条记录





 
第二章：LinearLayout和RelativeLayout 属性对比

共有属性：java代码中通过btn1关联次控件
android:id=”@+id/btn1″


控件宽度
android:layout_width=”80px” //”80dip”或”80dp” 
android:layout_width =“wrap_content”
android:layout_width =“match_parent” 

控件高度
android:layout_height=”80px” //”80dip”或”80dp”
android:layout_height =“wrap_content”
android:layout_height =“match_parent”

控件排布
android:orientation=”horizontal”
android:orientation=”vertical“

控件间距
android:layout_marginLeft="5dip" //距离左边 
android:layout_marginRight="5dip" //距离右边
android:layout_marginTop="5dip" //距离上面
android:layout_marginRight="5dip" //距离下面
android:paddingLeft="5dip" 控件显示位置
android:gravity=”center” //left,right, top, bottom 
android:gravity=”center_horizontal”
android:layout_gravity是本元素对父元素的重力方向。
android:layout_gravity属性则设置控件本身相对于父控件的显示位置
android:gravity是本元素所有子元素的重力方向。
android:layout_gravity=”center_vertical”
android:layout_gravity=”left”
android:layout_gravity=”left|bottom”


TextView中文本字体
android:text=”@String/text1″ //在string.xml中定义text1的值 
android:textSize=”20sp” android:textColor=”#ff123456”
android:textStyle=”bold” //普通（normal）， 斜体（italic），粗斜体（bold_italic）
TextView中，控制其以…结束
android:ellipsize=”end”

只有一行
android:singleLine=”true”

定义控件是否可见
android:visibility=”visible” //可见 
android:visibility=”invisible”　　//不可见，但是在布局中占用的位置还在
android:visibility=”gone”　　　//不可见，完全从布局中消失

定义背景图片
android:background=”@drawable/img_bg” //img_bg为drawable下的一张图片
seekbar控件背景图片及最大值
android:progressDrawable=”@drawable/seekbar_img” 
android:thumb=”@drawable/thumb” 
android:max = “60″
android:layout_alignWithParentIfMissing=”true”


仅在RelativeLayout中有效：
在父亲布局的相对位置
android:layout_alignParentLeft=”true” //在布局左边 
android:layout_alignParentRight=”true” //在布局右边 
android:layout_alignParentTop=”true” //在布局上面 
android:layout_alignParentBottom=”true “ //在布局的下面


在某个控件的相对位置
android:layout_toRightOf=”@id/button1″ //在控件button1的右边，不仅仅是紧靠着 
android:layout_toLeftOf=”@id/button1″ //在控件button2的左边，不仅仅是紧靠着 
android:layout_below=”@id/button1“ //在控件button1下面，不仅仅是正下方 
android:layout_above=“@id/button1” //在控件button1下面,不仅仅是正下方


定义和某控件对奇
android:layout_alignTop=”@id/button1” //和控件button1上对齐 
android:layout_alignBottom=”@id/button1” //和控件button1下对齐 
android:layout_alignLeft=”@id/button1” //和控件button1左对齐 
android:layout_alignRight=”@id/button1” //和控件button2右对齐
android:layout_centerHorizontal=”true” //水平居中 
android:layout_centerVertical=”true”
android:layout_centerInParent=”true” 


仅在LinearLayout中有效
设置控件在一排或一列中所占比例值
android:layout_weight=”1″
（一） android:layout_height = "fill_parent"
（二） android:layout_height = "wrap_content"
在（一）、（二）2种情况在相同的android:layout_weight属性下呈现出正好相反的情况。因为：
1）在layout_width設置為fill_parent的時候，layout_weight所代表的是你的控件要優先盡可能的大,但這個大是有限度的，即fill_parent.
2）在layout_width設置為wrap_content的時候，layout_weight所代表的是你的控件要優先盡可能的小,但這個小是有限度的，即wrap_content.
layout_height 同 layout_width.














Android 搜索
总的说来，搜索界面是一个AutoCompleteTextView，他的数据是一个SuggestionsAdapter，每次输入内容后，更新AutoCompleteTextView中的mFilter, 然后在contacts中的peopleLookup表中查找，更新adapter，然后将结果显示给用户  
1. Android提供了一个Search Framework，它提供两种Search界面：dialog形式以及内嵌widget形式
2. 两种形式都可以增加这些功能：记录/清除最近搜索记录、自动纠错、语音搜索等

