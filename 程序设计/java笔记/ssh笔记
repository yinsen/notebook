SSH框架的作用：
就是实现“间接”的设计。

1. 程序状态数据的可配置化：静态配置文件 或 OM面
2. 程序内部组件的可配置化：面向接口编程
3. 程序内部整体流程的可配置化：使用配置文件组织代码。SSH就是将程序的整体运行流程做成可配置化的组件，使得程序不再是编译以后就不能再改变的hard code，可以随时改变程序的运行逻辑、流程



第一章、表单介绍
一、表单简介：

<form method="post" name="myform" action=""> 
    <label for="username">用户名:</label><br />
    <input name="username"  />
    <label for="password">密码:</label><br />
    <input type="password" name="password" />
    <input type="submit" value="login" />  
</form>

		1. form属性解释：
				1）表单应该包含name,aciton,method这三个必须的属性，enctype,id这两个属性可以根据需要加上，一般是建议加上；
				2）表单不要嵌套 
				3）document.form.action与document.form.submit()一定不要搞混，action是属性，submit是方法，方法要加上括号

				4）Action属性指定用来处理用户输入数据的Servlet、Jsp。它也可以指定将输入数据发送到E-Mail地址（如用Mailto:services@icconcept.com）。这各E-mail方式可以在HTML编写者无权使用Servlet或CGI时使用。
		
				5）Method属性指定向服务器传递数据的HTTP方法。Get方法为Form的默认方法，它让数据挂在请求URL之后向服务器的Web容器发送;Post文献则把数据和URL分开发送。注意：Web请求的URL有长度限制。


		2. form子元素介绍：
				1）type="submit"的那个元素负责提交整个form的数据。
				OnSubmit和OnReset属性用来添加JavaScript，这些JavaScript在用户数据被传递或重置时运行。这样，当用户点击Submit按钮时，JavaScript可以检验数据的格式。

				2）各种input,fieldset,Text fields,等元素都是要提交的数据
				3）Enctype属性指定了数据在发送之前的编码方式。默认值是Application/x-www-form-urlencoded，是指浏览器将空格转化成（＋），而将非字母字符转化成（％）加ASCII码。同时，将输入变量和其值之间加（＝），在变量之间加（&）。另一种编码方法Enctype 是Multipart/form-data。这种方法将每个输入控制变量分别以MIME类型文件自动使用Post方法向服务器传递。这种方法比较适合传递复杂的用户输入数据。使用这种方法只要在FORM内设置“ENCTYPE="multipart/form-data"就行了。

		3. 另外：
				1）Accept和Accept-Charset属性是在HTML4.0新加入的，它用来指定服务器程序接受的MIME类型（ACCEPT）和字符编码（ACCEPT-CHARSET）。对J2EE程序，服务器的Servlet程序必须能接受在Form里指定的MIME类型和编码类型。
				2）在一个完整表单中，不应有名字为action或submit的标签，否则将会产生"对象不支持此属性和方法"的ie错误。如代码"<input type='xxxx' name="action" >"在表单中是不允许出现的,而Action和Submit则是允许的。

二、form表单的提交方式有两种：
		1）按钮 type="submit"
		2)submit()方法
		（1）document.formname.submit();formname是form表单的name属性的值
		（2）document.form[i].submit();是通过form数组访问i从0...n






第一章、JSP

  不是从jsp到servlet，可以从servlet到jsp来考虑jsp。jsp可以看成是servlet的缩写，用静态标签代表大量的输出语句，用各种内置对象表达很多servlet的内容。

	一、html，servlet与jsp
		html为静态文本服务器，servlet为应用服务器，如果用servlet来返回html页面太费劲，就产生了jsp。
		1.一个jsp页面就相当于一个servlet的service函数。
		2.jsp中一个静态include就相当于宏，将外面的一段jsp或html包含进当前的jsp中；本质上只有一个servlet类，所以它不能include一个servlet。
		3.jsp中一个动态include就相当于函数调用，调用另外一个servlet的service函数；本质上是不同的servlet类，所以它可以include一个servlet。



	二、jsp页面通常都由conf/web.xml中的<servlet-name>jsp</servlet-name>元素来映射。所有对jsp的访问都由这个servlet来处理。











jsp负责处理请求和生成输出；而浏览器和javascript负责解释和显示输出，并负责如何得到client的输入生成请求。也有一些不需要服务器参与的功能既可以用js也可以用jsp实现



1.在webapp的web.xml中主要配置的三种组件就是Servlet,Filter,Listener。

Servlet、Filter、以及Struts：

	一、什么是Struts，以及Struts框架的定位：
	    Tomcat的context由web.xml表示，在收到一个request后先交给web.xml中的filter处理，再交给servlet的Service。
	    如果context使用了Struts框架，则Struts也就是Filter链中的一个，当struts这个filter被调用时，就是调用其中的FilterDispatcher。由它再调用struts.xml中定义的action，执行它们的execute()。

	   <filter>
	　　　 <filter-name>struts2</filter-name>
	　　　 <filter-class>
	　　　　　 org.apache.struts2.dispatcher.FilterDispatcher
	　　　 </filter-class>
	　　</filter>
	　　<filter-mapping>
	　　　 <filter-name>struts2</filter-name>
	　　　 <url-pattern>/*</url-pattern>
	　　</filter-mapping>





二、Struts
1. Struts1与Struts2的区别：
	1）Struts1是基于ActionServlet，而Struts2是基于Filter
	2）Struts1用struts-config.xml,而Struts2是用struts.xml，配置更简单
	3）Struts1 Action是单例模式，用一个实例来处理所有的请求，所以必须是线程安全的
		Struts2 Action对象为每一个请求产生一个实例，因此没有线程安全问题。
		
		
三、Struts1四大组件
1. ActionServlet:核心控制器，转发所有的http请求到相应的Action；

2. Action:某个请求处理单元。核心函数execute(ActionMapping //里面包含了配置文件中的映射规则，可用它来直接操作页面的跳转等
																		, ActionForm // 接收或发送的表单数据
																		, HttpServletRequest //本次request
																		, HttpServletResponse); //本次response

3. ActionMapping:处理struts-config.xml文件的映射，struts-config.xml文件配置所有url到action的映射关系；

4. ActionForm Bean：用于存储一个request中的所有key-value；生命周期为session范围



？？/path的作用？？
？？formbean是如何根据struts-config.xml创建的？？

四、Struts1的请求处理流程
1. 所有的对jsp的直接请求还是根据/conf/web.xml中的定义，映射到jspServlet处理；
2. 所有的*.do可以在webapp的web.xml中定义，映射到一个自定义的ActionServlet处理；
3. ActionServlet根据struts-config.xml中的定义，映射到对应的action类处理，其中：
		type：表示负责处理的action类
		name：表示负责暂存Form数据的ActionForm bean类
		input：表示此form数据是从哪里来




五、使用已有的类来提高开发效率：
1. ForwardAction
	如下定义一个action：
	<action path="/login" >
				<forward ="/main.jsp"/>
	</action>
	可以不需要定义一个自己的action，由struts1默认使用ForwardAction将请求转到main.jsp




六、Struts1的标签库
	1. 有以下自带的标签库：
		1）struts-bean.tld：对应org.apache.struts.taglib.bean实现，包含以下标签。
				Cookie
				Define
				Header
				Include
				Message
				Page
				Parameter
				Resource
				Size
				Struts
				Write

		2）struts-html.tld：对应org.apache.struts.taglib.html实现，包含以下标签
				。。。
			
			
		3）struts-logic.tld：对应org.apache.struts.taglib.logic实现，包含以下标签


	2. 在jsp中使用标签：
		如：
			<bean:message key="label.title" />
			bean代表标签库，message代表其中的一个标签，key代表此标签中的一个属性，"label.title"代表此属性的值
	


七、Struts1的总体思路：
Servlet作为控制器处理请求，JSP代码用于处理界面显示的工作；
1）当一个JSP请求过来时，发送到JSPServlet处理，JSPServlet转到JSP页面代码，JSP页面代码再解析其中Struts1的标签，将其解析成普通的html标签再加上js发送到客户端浏览器；
2）或者是发送到ActionServlet，再转到JSP页面，再。。。
3）发送到浏览器的html标签以及js代码被浏览器解释执行，用于显示、用户输入、组装Http Reqs等；

使用标签库中的标签作为前台发送请求的对象，其标签设定好了发送的*.do形式的请求，并将数据的接收ActionForm bean预先设定好


八、struts-config.xml
此配置文件里的元素定义是有一定顺序要求的，比如<data-sources>标签就必须放在前面等，好像eclipse会做检查





session 超时

其实你把Session设置为60并不是指每次你操作完后时间重新开始计时。Session每次是以一半的时间记时一次。 
比如：Session 设置为60，你在第20分中操作过，那还，是不会报超时的，这时的超时时间并没有重新计时。如果再过41分钟你再操作一次，就会报超时。

假如：Session设置的超时时间为60分钟 
1、自从我第一次访问后，过了31分钟，你再次访问，那么Session会重新计时，超时还是60分钟，这时在，你再过40分钟来访问也不会超时。 
2、自从我第一次访问后，过了20分钟，你再次访问，Session不会重新计时，还是以你第一次访问的时间。这里，你再过41分钟来访问，就会报超时。因为开始的20＋后来的41分钟就超过了60分钟  




Sping就是将EJB中一些重要且复杂的东西提炼出来让大家能方便的使用。
