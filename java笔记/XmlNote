
第一章：xml解析基本概念：

		一、  SAX和DOM
				目前XML的解析主要有两大模型：SAX和DOM。

				1. SAX是基于事件的，其基本工作流程是分析XML文档，当发现了一个新的元素时，产生一个对应事件，并调用相应的用户处理函数。这种方式占用内存少，速度快，但用户程序相应得会比较复杂。
				2. DOM（文档对象模型），则是在分析时，一次性的将整个XML文档进行分析，并在内存中形成对应的树结构，同时，向用户提供一系列的接口来访问和编辑该树结构。这种方式占用内存大，速度往往慢于SAX，但可以给用户提供一个面向对象的访问接口，对用户更为友好。

		二、  验证和非验证
				对于一个特定的XML文档而言，其正确性分为两个层次。
					1. 首先是其格式应该符合XML的基本格式要求，比如第一行要有声明，标签的嵌套层次必须前后一致等等，符合这些要求的文件，就是一个合格的XML文件，称作well-formatted。
					2. 除此之外，一个XML文档因其内容的不同还必须在语义上符合相应的标准，这些标准由相应的DTD文件或者Schema文件来定义，符合了这些定义要求的XML文件，称作valid。
	
				因此，解析器也分为两种：
					1. 一种是验证的，即会跟据XML文件中的声明，用相应的DTD文件对XML文件进行校验，检查它是否满足DTD文件的要求。
					2. 另一种是忽略DTD文件，只要基本格式正确，就可以进行解析。
				就我所知，验证的解析器通常都是比较重量级的。TinyXml不支持验证，但是体积很小，用在解析格式较为简单的XML文件，比如配置文件时，特别的合适。

		三、TinyXml
				1.  TinyXml是一个基于DOM模型的、非验证的轻量级C++解释器。因此提供了一系列的类对应XML文件中的各个节点。主要类间的关系如下所示：

					TiXmlBase：其它类的基类，是个抽象类
					TiXmlNode：表示一个节点，包含节点的一般方法，如访问自节点、兄弟节点、编辑自身、编辑子节点 //是以下四个类的基类

					TiXmlDocument：表示整个XML文档，不对应其中某个特定的节点。
					TiXmlElement：表示元素节点，可以包含子节点和TiXmlAttribute
					TiXmlAttribute：表示一个元素的属性
					TiXmlText：表示文本节点

					TiXmlComment：表示注释
					TiXmlDeclaration：表示声明
					TiXmlUnknown：表示未知节点，通常是出错了

					1） 由于各个节点类都从TiXmlNode继承，在使用时常常需要将TiXmlNode*类型的指针转换为其派生类的指针，在进行这种转换时，应该首先使用由 TiXmlNode类提供的一系列转换函数，如ToElement(void)，而不是c++的dynamic_cast

					2） 由于TinyXml是一个非校验的解析器，因此当解析一个文件时，很可能文件并不包含我们预期的某个节点，在这种情况下，TinyXml将返回空指针。因此，必须要对返回值进行检查，否则将很容易出现内存访问的错误。

					3） 如何重头建立一个XML文件：先建立一个TiXmlDocument对象，然后，载入某个模板，或者直接插入一个节点作为根节点，接着就可以像打开一个已有的XML文件那样对它进行操作了。

				2. 总结
					TinyXml最大的特点就是它很小，可以很方便的静态连接到程序里。对于像配置文件、简单的数据文件这类文件的解析，它很适合。但是由于它是非验证的，因此需要在程序里做许多检查工做，加重了程序编写的负担。因此对于复杂的XML文件，我觉得最好还是用验证的解析器来处理。
