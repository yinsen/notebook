搭建服务器的工作：DDS安装&配置；Webservice安装&配置；负载平衡配置&启动
除了显式的安装DDS & DDS webservice之外，更重要的任务就是配置和操作webservices

一、安装DDS

	1） 发布包结构中的主要内容：
		a）发布包中只需关注 DrillDownServer 和 Web Services两个文件夹，分别对应DDS和Webservice；
		b）DrillDownServer需要关注bin/下的配置；
		c）Web Services中只需关注data/，lib/以及server/Tomcat/webapps/openls三个东西；
	2） 发布包部署后的主要结构：（全部放入/dds下面）
		也主要是两个目录：dds/以及OpenLS/，分别对应发布包中的 DrillDownServer 和 Web Services
		a）需要关注dds/dds/bin下面的cfg文件，拷贝dds/dds/lib下面的so文件		




	1. 安装DDS就是copy ddsserver并将以下lib文件放入/lib文件夹下面：
		-rw-r--r-- 1 root root  1221282 Jan 13  2009 libtraffic.so
		-rw-r--r-- 1 root root  2305059 Jan 13  2009 libddstraffic.so
		-rw-r--r-- 1 root root  5436061 Jan 13  2009 libddssnap.so
		-rw-r--r-- 1 root root  2601391 Jan 13  2009 libddsroute.so
		-rw-r--r-- 1 root root  2313040 Jan 13  2009 libddsprox.so
		-rw-r--r-- 1 root root   506007 Jan 13  2009 libddsoverlay.so
		-rw-r--r-- 1 root root  2069898 Jan 13  2009 libddsmap.so
		-rw-r--r-- 1 root root  5804226 Jan 13  2009 libddslookup.so
		-rw-r--r-- 1 root root 14202971 Jan 13  2009 libddsimg.so
		-rw-r--r-- 1 root root  2091206 Jan 13  2009 libddsextract.so
		-rw-r--r-- 1 root root  2062330 Jan 13  2009 libddsedit.so
		-rw-r--r-- 1 root root  2063151 Jan 13  2009 libddscache.so
		-rw-r--r-- 1 root root   180679 Jan 13  2009 libddscorridor.so






二、配置DDS

	1. DDS默认配置文件为install_dir\DrillDownServer\ddserver.cfg；但启动时也可以另外指定配置文件及目录;DDS知道自己的当前位置，所以所有的path设置既可以使用绝对路径，也可以使用相对路径；
		所有空格忽略；所有以unrecognized token开头的或以#开头的都为注释；

	2. 刚开始只需要关注三个方面的配置：license information, datasets, and image settings
		1）根据decarta提供的license编辑ddserver.cfg中的 Username and LicenseKey条目；
		2）datasets的配置，可先用Stickville虚拟数据测试DDS的配置，然后再用现实数据；
		3）Image Settings，就是如何根据数据来绘制地图。在ddserver.cfg中用ImageSettings参数来配置多种地图样式，每种样式都有一个相应的.cfg文件来详细描述地图绘制细节；比如bright.cfg & old-world.cfg. 

		4）一个特例参数：Projection，在DDS 4.2.1 Web Services之后的版本，它要设置成MERCATOR_ELLIPSOIDAL

	3.[Modules]section：
		# 动态链接库或远程机器上的动态链接库
		# 每种query都可以有多个以“，”间隔的处理实体，这样可以轮询处理，以达到负载平衡的目的

	4.[Lookup]section:
		Alias:指定路的别名，这样可以搜索时可以模糊匹配
		Chaff:各种公共字符串

	5.[DDSProx]
		SuppressAddrPointsFromPNB0：定点搜索周围POI时，包不包括Address Point。

	6.[Routing]
		有些routing的参数是跟dataset相关的，它们被放在[Dataset] section.

	7.[Dataset]
		1）例子：
			[DataSet1]
			Name=Conn
			Path=e:\base\src\builder\09001.rmf
			[DataSet2]
			Name=ABCxyz
			Path=e:\data\*.rmf
			[DataSet3]
			Name=TX
			Path=e:\data\48113.rmf,e:\data\48391.rmf
			RmfBufferSize=32000000
			[DataSet4]
			Name=TT
			Path=e:\data\tt\*.rmf
			CountryList=Countries.cfg
			[DataSet5]
			Name= NC
			Path=e:\data\NTGDF_2011.1_1.0_83LM11100ND8000GAAV5.rmf
			DSTFile=C:\Data\NAM.dst

		2） 每个Dataset还有一些跟Routing相关的参数 ，如转弯cost，坡道cost等等
		    每个Dataset还有一些跟Lookup相关的参数 ，
			
			*** 这两个named sets参数集可以作为一个独立的个体应用在配置文件的任何一个位置，并多次应用 ***


		3） ConnFile参数：

	8.[EditDataSetn]
		它与[Dataset]是多对一的关系


三、准备地图数据索引文件（Map Data Index Files）：每一个Dataset都包括 RMF 和它的 ndx 文件
	1. 为每一个RMF文件制作ndx文件：     indexbuilder_version.exe filename.RMF
		每一个RMF文件都会生成以下几个ndx文件：   _21.ndx, _40.ndx, _71.ndx, _40APT.ndx
		其中_40.ndx包括regular POIs，而_40APT.ndx包括address point POIs



四、启动和使用DDS
	1. 启动命令： ddserver [cfg文件]
	   各种启动参数用于覆盖cfg文件中的参数，这样可以用一个cfg文件启动多个不同的DDS。

	2. 
		1）各种从cport发送的控制命令，都是以标准query message的格式发送，如：
			CMD|(input_group)|(control_group)|(message)|   -------  其中input_group, control_group通常为空，所以实际上一般为：
			CMD|||(message)|
		2）DDS只对 RUOK 和 STATUS两个命令生成response。这两个命令只能得到DDS请求分发器本身的信息，而无法得到具体plug-in的信息。


五、消息规范：
	1. 总体规则：
		1）client和server的交互都是由一一对应的request&response组成。即使request对应的response没有信息，也要返回无信息的response；而即使response要有多条信息，也会将它们封装在同一个response中。
		2）支持异步请求，消息规范可以让client识别每一条response对应的request。
		3）request&response的消息格式是一致的。
		4）消息之间是无状态的，也就是说每一条请求应答都是完全独立的。
		5）没有流控制消息，来暂停和重启消息的传输。每条消息都是即时发送的。

	2. 连接DDS：
		1）client的socket连接示例：DDS包中的reqtest 和 typetest这两个实例的主要部分就是socket连接；
		2）因为很多功能需要分成多个发向DDS的请求，所以DDS client最好和server在同一台机器上，可以保证性能。就像webservice和dds在同一台机器上，而webservice大大压缩了请求的次数。

	3. 消息格式：
		请求：
			QTOK[password] | [input_group] | [ control_group ] ||
		应答：
			QTOK | status_group | [ output_group [ | output_group ]... ] ||


		1）空格：在头尾出现时，表示它为空格，而在字符串中间出现时，表示空格字符本身；
		2）QTOK为四字符请求码，request和response相同；
		3）当请求为发送到cport的操作命令时，QTOK有可能有更多个字符；
		4）可选项[password]只在.cfg文件中UserAuthorization指定值的情况下才需要填写；发送到cport的password，需要放在圆括号中。
		5）四种参数组，请求应答各两种，比如做条路径：
			a）[input_group]包含起始点和终点信息；[ control_group ]包含路径种类，比如最快，最短等。
			b）status_group 包含成功/失败信息；[ output_group]包含结果即路径相关的所有信息。
			c）所有的参数都是以kvp形式表示：%key=value
			d）所有四组参数组中的kvp对之间的顺序都是不固定的；
		6）kvp格式：
			%[nnn]keyword[=[value]]
			a）nnn表示value的字节数，一般只有value含有'|','%'等字符时才使用
			b）因为有nnn的存在，keyword不能以数字开头；'U'开头的为用户保留，'T_'开头的为内部保留；
			c）没有value，就没有'='字符，除非有值，但为null；
			d）有的keyword有多个value域，之间以','分隔；
	
	4. 请求码QTOK

	5. keywords：
		1）有的是通用的keywords，而有的是特定plug-in或特定query的keywords；这里先只介绍通用keywords：
		比如说%PC=95113：
			a）作为input keywords时作为输入参数的一项；
			b）作为output keywords时表示输出参数的数据；
			c）作为control keywords时形式为%PC，表示要输出post code；
		
		2）单位表示：
			例如：%RAD=M300表示300米以内的距离。还有以下常用单位：
								M meters
								K kilometers
								R miles
								F feet
								D degrees
								I minutes
								S seconds

		3）Error Message：
			a）命令行提示符显示；
				Bad input or unauthorized command --------> request没有提供正确的密码；
				WARNING: Name Index Not Built for dataset ----------> 没有提供正确的索引文件；
				Maximum threads exceeded: n threads  -------------> 最大线程数超出；

			b）%S("status")形式提供的错误信息：
				参见错误表Table 3.1



六、DDS消息详细解析：
		1. 通用query token：（只有plug-in代码不同）
			例如：MVER 指请求mapping plug-in的版本，PVER指请求proximity plug-in的版本；同理，xVER指请求x plug-in的版本；
			同理，还有如下通用query token：
				xDSA 				Dataset annotation information.
				xDSL 				List of available datasets for the x plug-in.
				xDSX 				Determine extent of a dataset.
				xVER 				Determine the version of the software for the x plug-in.
			eg：
			Query
			sdsl||||
			Response
			sdsl|%S=OK%N=2|%DS=VENDOR1,RMF,UDM|%DS=VENDOR2,RMF,UDM||

		2.Corridor search plug-in（各个plug-in的query token解析）
















第二篇：Webservice：

五、WebService：
	1. Webservice是对OpenLS的实现，而且还实现了一些OpenLS的扩展（未来的OpenLS）。
	2. OpenLS就是用于请求和应答的一系列的XML规范，Webservice就是使用一套 XML-over-HTTP 服务
	3. 具体服务项目（还有对其各自的一些扩展）：
		Directory Service (POI lookup)
		Dispatch Service (part of the fleet service, which is a premium feature)
		Exclusion Zone Service (part of the fleet service, which is a premium feature)
		Geofencing (part of the fleet service, which is a premium feature)
		Location Utility Service (geocoding and reverse geocoding; considered a premium feature when the DDS Snap Plug-in is used)
		Presentation Service (map drawing)
		Route Service (route calculation)



六、WebService系统架构：
	1. Webservice运行流程：从client接收xml请求后，转化成相应的一条或多条DDS请求发送给DDS，然后接收DDS的应答后组织成xml应答发送给client
		例如，client请求一条路径，client发送route请求到webservice。
		webservice的工作流程：
			1）发送起点的geocoding请求到DDS；
			2）发送终点的geocoding请求到DDS；
			3）发送两点之间路径计算的请求到DDS；
			4）发送路径相关信息的请求到DDS；
			5）向DDS请求整条路径的maps信息和maneuvers信息
			。。。

		*** webservice的URL：  http://ws.decarta.com/openls/openls ***


	2. Client：包括所有可以处理XML-over-HTTP 或使用 Dynamic Script Tags (DST) with JSON的程序。典型的有Java app或浏览器
		（使用http://ws.decarta.com/openls/console来测试xml请求，用ie浏览器）

		
	3. XML for Location Services (XLS)
		请求应答消息分为消息头和消息体，其中RequestHeader包含了clientName和clientPassword
		

	4. webservice的配置：指定configuration属性：
		公司的XLS还包括一些自己定义的扩展参数，如dataset，map样式等，由configuration属性确定

	5. webservice的功能由具体的OpenLS Servlet来提供


七、webservice相关文档和例子列表，参见1.4节



八、安装Self-hosted webservice：使用Tomcat

	1. 连接DDS：
		DDS可以与它的webservices的Tomcat在不同的主机上，此时相关的webapp就要找到对应的DDS实例：
		在install_dir\Web Services\server\Tomcat 5.0\webapps\openls\WEB-INF\web.xml 中 做如下配置：
		<context-param>
			<param-name>hostname</param-name>
			<param-value>localhost</param-value> ------------------->此处填写DDS所在的IP地址
			<description>Drill Down Server hostname </description>
		</context-param>

	2. DDS集群：通过配置 install_dir\Web Services\ddscluster.xml可以在同一个host的不同端口上同时启动四个 DDS instance。
		1）此时这多个DDS就分成了master DDS和image DDS。它们的ddserver.cfg也分别变成ddserver-master.cfg 和 ddserver-imageSlave.cfg
		
		具体细节请参照文档；

	3. 连接数据库：如果不是使用Tomcat或数据库HSQLDB，请修改install_dir\Web Services\server\Tomcat 5.0\conf\server.xml
		默认配置：
			<parameter>
				<name>username</name><value>sa</value>
			</parameter>
			<parameter>
				<name>password</name><value></value>
			</parameter>
			<parameter>
				<name>driverClassName</name>
				<value>org.hsqldb.jdbcDriver</value>
			</parameter>
			<parameter>
				<name>url</name>
				<value>jdbc:hsqldb:hsql://localhost/olsdb</value>
			</parameter>


	4. 安装HSQLDB数据库，并创建各种Tables


九、配置Web Services

	1. 在install_dir\Web Services\server\Tomcat5.0\webapps\openls\WEB-INF\classes\service-configuration.xml中定义了为哪些client提供服务：
		1）client name: 放在每个clientName请求头中的帐号
		2）client password: 放在每个clientPassword请求头中的密码
		3）client’s role：两种：admin & ws-client；只有admin才可以访问Usage Reporting,Cache,和 Admin tabs of the console.

		4）每个client都有两种配置文件：a default configuration and alternate configurations；
			client可以通过请求头中的configuration字段来确定当前request使用那种配置来处理；
			client可以通过configuration中的dataset字段来确定使用ddserver.cfg中的哪dataset；
			client可以通过configuration中的dds-image-settings字段来确定使用ddserver.cfg中的哪种image setting；
			


					<!-- Use cloneable-client to minimize repetition-->     （cloneable-client就是用来拷贝修改的client模板）
					<cloneable-client name="default-client" role="ws-client">
					<default-configuration dds-image-settings="DefaultImageSettings" dds-dataset="stickville" />
					<configuration name="stickville" dds-image-settings="DefaultImageSettings" dds-dataset="stickville" />
					<configuration name="blue-steel" dds-image-settings="blue-steel" dds-dataset="stickville" />
					<configuration name="blue-steel-tile" dds-image-settings="blue-steel-tile" dds-dataset="stickville" />
					<configuration name="old-english" dds-image-settings="marigold" dds-dataset="stickville" />
					<configuration name="old-english-tile" dds-image-settings="marigold-tile" dds-dataset="stickville" />
					<configuration name="bright" dds-image-settings="bright" dds-dataset="stickville" />
					<configuration name="bright-tile" dds-image-settings="bright-tile" dds-dataset="stickville" />
					<configuration name="old-world" dds-image-settings="old-world" dds-dataset="stickville" />
					<configuration name="old-world-tile" dds-image-settings="old-world-tile" dds-dataset="stickville" />
					</cloneable-client>
					- <!-- Assign clientName and clientPassword by cloning a cloneable-client
					-->
					- <!-- All configurations from the cloneable client are cloned into this client-clone
					-->

					（这里就是一个从default-client克隆下来的一个用户，它除了帐号密码外其它的配置都相同）
					<client-clone password="abc123" name="someclient" cloneOf="default-client" />
					- <!-- client with admin role is requird to log into certain tabs of web based console
					-->

					- <client name="admin" role="admin" password="12345">   （这个是admin用户，应该只有一个）
					<default-configuration dds-image-settings="DefaultImageSettings" dds-
					dataset="stickville" />
					<configuration name="stickville" dds-image-settings="DefaultImageSettings" dds-
					dataset="stickville" />
					</client>
					- <!-- Add additional configurations as needed. This configuration demonstrates online
					-->
					- <!-- image settings. The us-carto-nt image settings require navteq data, and are
					-->
					- <!-- documented in docs/USCartographicNT_ImageSettingConfiguration_DDS413.pdf
					-->
					- <client name="us-carto-nt" password="us-carto-nt">
					<default-configuration dds-image-settings="us-carto-nt" dds-dataset="navteq" />
					<configuration name="us-carto-nt-online" dds-image-settings="us-carto-nt,http://
					localhost:8080/openls/library?clientName=us-carto-nt&clientPassword=us-carto-
					nt&readFile=us-carto-nt.cfg" dds-dataset="navteq" use-dds-dataset-range="true" />
					<configuration name="us-carto-nt" dds-image-settings="us-carto-nt" dds-
					dataset="navteq" use-dds-dataset-range="true" />
					</client>
					</client-configuration>



		2.Server会每5分钟load一次service-configuration.xml文件，所以可以随时修改它而不用重启server。如果当前的有问题则会返回错误信息并使用之前xml。
			如果是使用Admin帐号创建一个用户，则立刻生效，不需要等5分钟。


		3.DDS Web Services和JavaScript API之间使用UTF-8进行通信。 js不与DDS直接通信






																						
																						 																				 _ddserver-master.cfg
第三篇：																																							|_ddserver-imageSlave.cfg
	一	、三步启动：																			    															|_ddserver-lookup.cfg
		1. release包的启动路线：startServer.sh -> startServerUnix.xml -> ddscluster.xml---	|_ddserver-map.cfg
					(就是在startServer.sh中的startServerUnix.xml后面加上ddscluster)								|_.......
																																										|_

					1）startServerUnix.xml分析：
						server必须使用ddscluster.xml & ddserver-master.cfg等配置方式，因为最简单的startServer.sh start是用于启动gui模式的DDS-Webservice
						ClusterManager.java用于在启动前读取和解析ddscluster.xml.

		2. Tomcat启动：./catalina.sh start


		3. Mysql启动：/etc/init.d/mysqld start

	二、
		1. 将DrillDownServer文件夹考为/dds/dds;
		   将Web Service文件夹考为/dds/OpenLS;
		2. 修改ddserver.cfg ----> 分为ddserver-master.cfg, ddserver-map.cfg, ddserver-imageslaver.cfg等等
		   修改dds-cluster.xml文件

		   修改startServerUnix.xml
		   修改web.xml
		   修改WEB-INF\classes\service-configuration.xml文件
			 拷贝 datasets.cfg、china-province_1.cfg、global-decarta.cfg等 文件（完全由ddserver-master.cfg、ddserver-imageslaver.cfg决定）

		3. 修改ddslicense.xml
		4. Tomcat 6.0.18文件夹改为Tomcat
		5. 打开aws的server port
		6. 建立/dds/logs/文件夹
		7. 拷贝fonts、icons、world-icons等文件夹相关内容


	三、安装数据库
		1. Mysql:
			1)yum install mysql mysql-server
			2)chown -R mysql:mysql /var/lib/mysql （改变权限）
			3)/etc/init.d/mysqld start			（centos上自己安装mysql后要手动启动）

		2.hsqldb：
			1)yum install hsqldb
			2)与12上唯一不同就是server.properties文件的最后一行server.address      localhost，12上没这一行




第四篇：直接拷贝dds现成工程

		1.新建dds帐号；
		2.直接拷贝/dds/三个文件夹和dds_start_vars 到/dds/下，再拷贝/cache,/map1,/map2,/mnt/sdb1到/dds/下，并制作它们的软连接到/下；
		3.拷贝/etc/init.d/openls 和 /etc/openls文件
		4.就可以service openls start了

		遇到的问题：java.net.UnknowHostException: ys-centos:yscentos；
		此时ping 127.0.0.1可以ping通，但ping ys-centos不可以ping通。是因为hostname和ip没有对应上。解决办法就是gedit /etc/hosts，增加一行： 127.0.0.1   ys-centos













	

